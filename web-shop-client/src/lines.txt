const db = require('../models');


const getProductsOfCustomer = async (req, res)=>{
  let {customerId} = req.params
  try{
    let response = await db.basket.find({customerId:customerId})
    if (response.length === 0){ res.send("no item avaliable"); return;}
    res.json(response)
  }catch(err){
    res.send(err)
  }

}
const getProductsOfSeller = async (req, res)=>{
  let {sellerId} = req.params
  try{
    let response = await db.basket.find({sellerId:sellerId})
    if (response.length === 0){ res.send("no item avaliable"); return;}
    res.json(response)
  }catch(err){
    res.send(err)
  }

}

const addProductToBasket = async (req, res)=>{
  let {sellerId, productId, pieces} = req.body
  try{
    var {name} = req.user
  }catch(err){
    res.send("please log in")
    return
  }
  var customerId;
  try{
    var foundCustomer = await db.seller.findOne({name}).then(data=>{/* console.log(data); */ return data}).catch(err=>{throw new Error(err)});
    var customerId = foundCustomer._id
    
  }catch(err){
    res.send("not allowed")
    return
  }
  if(customerId !== undefined){
    if(customerId !== sellerId){
     try{
      let response = await db.basket.find({sellerId:sellerId, customerId:customerId, productId:productId}).then(data=>{ return data}).catch(err=>{throw new Error("Can't fetch any data")});
      if(response.length !== 0){
        console.log(response.length, "cant add more item, item is alread in base")
        throw new Error("item is already sent")
        // return
      }else{
        await db.basket.insertMany([
                {sellerId:sellerId,
                customerId:customerId,
                productId:productId,
                pieces: pieces           }
              ]).then(data=>{console.log(data); return data}).catch(err=>{throw new Error("Try to log in then to add items to cart")});
      }
     }catch(err){
        console.log("___________________________laalalalallala______________________________")
        throw new Error (err)
      }
    }else{
      res.send("You are not loggedIn or you are trying to buy from yourself")
      return
    }
  }

}
const acceptProductSell = async (req, res)=>{
  let {sellerId, productId} = req.body
  // console.log(sellerId, productId, req.user.name)
  try{
    var {name} = req.user
    if(name === undefined){
      res.send("please log in 1")
      return
    }
    await db.seller.findOne({name:name}).then(data=>{
      if(data._id!= sellerId){
        console.log("___________________________________________________________________________")
        console.log(data._id, sellerId)
        console.log("___________________________________________________________________________")
        res.send("not allowed 1 ")
        return
      }
      return data
    }).catch(err=>{throw new Error(err)});

    await db.basket.findOne({productId:productId}).then(data=>{
      if(data.sellerId!= sellerId){
        console.log("___________________________________________________________________________")
        console.log(data.sellerId, sellerId)
        console.log("___________________________________________________________________________")
        res.send("not allowed 2 ")
        return
      }
      return data
    }).catch(err=>{throw new Error(err)});
    
  }catch(err){
    res.send("please log in 2")
    return
  }
    if(sellerId !== undefined){
      try{
          await db.basket.findOneAndUpdate(
            {productId: productId}, {accepted:true}
          ).then(data=>{ return data}).catch(err=>{throw new Error(err)});
      }catch(err){
        res.send("There is no item with this Id")
        return
      }
    }else{
      res.send("You are not loggedIn")
      return
    }
  

}
const unAcceptProductSell = async (req, res)=>{
  let {sellerId, productId} = req.body
  try{
    var {name} = req.user
    if(name === undefined){
      res.send("please log in 1")
      return
    }
    await db.seller.findOne({name:name}).then(data=>{
      if(data._id!= sellerId){
        console.log("___________________________________________________________________________")
        console.log(data._id, sellerId)
        console.log("___________________________________________________________________________")
        res.send("not allowed 1 ")
        return
      }
      return data
    }).catch(err=>{throw new Error(err)});

    await db.basket.findOne({productId:productId}).then(data=>{
      if(data.sellerId!= sellerId){
        console.log("___________________________________________________________________________")
        console.log(data.sellerId, sellerId)
        console.log("___________________________________________________________________________")
        res.send("not allowed 2 ")
        return
      }
      return data
    }).catch(err=>{throw new Error(err)});
    
  }catch(err){
    res.send("please log in 2")
    return
  }
    if(sellerId !== undefined){
      try{
          await db.basket.findOneAndUpdate(
            {productId: productId}, {accepted:false}
          ).then(data=>{ return data}).catch(err=>{throw new Error(err)});
      }catch(err){
        res.send("There is no item with this Id")
        return
      }
    }else{
      res.send("You are not loggedIn")
      return
    }
  

}
const updateProductShipping = async (req, res)=>{
  let {sellerId, productId, shipping} = req.body
  try{
    var {name} = req.user
    if(name === undefined){
      res.send("please log in 1")
      // return
    }
    await db.seller.findOne({name:name}).then(data=>{
      if(data._id!= sellerId){
        console.log("________________11111111111111111111111111111111111_______________________")
        console.log(data._id, sellerId)
        console.log("___________________________________________________________________________")
        res.send("not allowed 1 ")
        // return
      }

    }).catch(err=>{console.log(err)});

    await db.basket.findOne({productId:productId}).then(data=>{
      if(data.sellerId!= sellerId){
        console.log("__________________2222222222222222222222222222_______________________________")
        console.log(data.sellerId, sellerId)
        console.log("___________________________________________________________________________")
        res.send("not allowed 2 ")
        return
      }
    }).catch(err=>{console.log(err)});
    
  }catch(err){
    console.log("__________________333333333333333333333333333333_______________________________")
        console.log("___________________________________________________________________________")
    res.send("please log in 2")
    // return
  }
  
      try{
          let response = await db.basket.findOneAndUpdate(
            {productId: productId}, {shipping:shipping}
          ).then(data=>{ return data}).catch(err=>{console.log(err)});
          // console.log("__________________44444444444444444444444444_______________________________")
          // console.log("___________________________________________________________________________")
          res.json(response)
          // return
      }catch(err){
        // console.log("__________________555555555555555555555555_______________________________")
        // console.log("___________________________________________________________________________")
      //   console.log(err)
        // res.send("There is no item with this Id")
        return
      }



}


module.exports = { updateProductShipping, unAcceptProductSell, acceptProductSell, getProductsOfSeller,getProductsOfCustomer, addProductToBasket}


function unique(arrOfObj, prop) {
  let newArr = [];
  arrOfObj.forEach((val) => {
    if (
      undefined ===
      newArr.find(
        (value) =>
          JSON.stringify(value[prop]) === JSON.stringify(val[prop])
      )
    ) {
      newArr.push(val);
    }
  });
  return newArr;
}
const db = require('../models');

const getSeller = async (req,res,next)=>{
  try{
    let sellerData = await db.seller.find({}).then(data=>data).catch(err=>{throw new Error(err)})
    res.json(sellerData)
    next()
  }catch(err){
    res.send("cant fetch any data", err)
    next()
  }
}
const getSellerById = async (req,res,next)=>{
  let {id} = req.params
  try{
    let sellerData = await db.seller.findById(id).then(data=>data).catch(err=>{throw new Error(err)})
    res.json(sellerData)
    // next()
  }catch(err){
    res.status(404).json({data:{name:""}})
    // next()
  }
}
const deleteSellerById = async (req,res,next)=>{
  let {id} = req.params
  try{
    let sellerData = await db.seller.findByIdAndDelete(id).then(data=>data).catch(err=>{throw new Error(err)})
    res.json(sellerData)
    // next()
  }catch(err){
    res.status(404).send("not found")
    // next()
  }
}

const getMySeller = async (req, res, next)=>{

  let {id} = req.params;
  try{
    let sellerData = await db.seller.findOne({"_id":id}).then(data=>data).catch(err=>{throw new Error(err)})
    if(sellerData.name === req.user.name){
      res.json(sellerData)
      next()
    }else throw new Error("User is not logged in")
  }catch(err){
    res.status(404)/* .send("cant fetch data") */
    next()
  }
}

const getProduct = async( req, res, next)=>{
  try{
    let {sellerId, productId} = req.params;
    let sellerData = await db.seller.findById(sellerId).then(data=>data)
    let product = sellerData.products.find(obj=>obj._id==productId)
    console.log(product)
    res.json(product)
    next()
  }catch(err){
    res.status(404).send("cant fetch any data")
    next()
  }
}

const getFullSellerList = async (req, res, next)=>{
  try{
    let sellerData = await db.seller.find({}).then(data=>data)
    sellerData = sellerData.map(seller=>{
      return {sellerId: seller._id, name: seller.name, rating: seller.rating, products:seller.products.map(product=>{
        return {
          productName:product.productName, 
          category:product.category,
          holds:product.holds, 
          used:product.used, 
          sellOrRent:product.sellOrRent, 
          sellOrDemand:product.sellOrDemand, 
          job:product.job, 
          service:product.service, 
          year:product.year, 
          locationName:product.locationName, 
          make:product.make, 
          model:product.model, 
          kilometers:product.kilometers, 
          sold:product.sold, 
          price:product.price, 
          brand:product.brand, 
          imgSrc:product.imgSrc,
          desc:product.desc,
          date:product.date,
          productId:product._id
        }
      })}
    })
    res.json({seller:sellerData})
    next();
  }catch(err){
    res.status(404).send("cant fetch any data")
    next()
  }
}


const pushProductToSeller = async (req, res, next) =>{
  var {productName, category, sellOrDemand, job, service, year, locationName, make, model, kilometers, used, sellOrRent, holds, sold, price, brand, imgSrc, desc} = req.body
  var {name} = req.user
  let foundSeller = await db.seller.findOne({name})
  let sellerId = foundSeller._id

  if(imgSrc===undefined | imgSrc.lengt===0){var imgSrc = [
    "https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Antu_insert-image.svg/1200px-Antu_insert-image.svg.png",
  ]}
  try{
    let sellerObj = await db.seller.findByIdAndUpdate(sellerId, {$push:{products: {productName, category, sellOrDemand, job, service, year, locationName, make, model, kilometers, used, sellOrRent, holds, sold, price, brand, imgSrc, desc}}})
    res.json(sellerObj)
  }catch(err){res.status(404)}
  try{
    let data = await db.seller.findById(sellerId)
    let newData = await db.seller.findByIdAndUpdate(sellerId, {products: unique(data.products, "productName")}, {returnOriginal: false}).then(data=>data)

  }catch(err){res.status(404)}
}

const sellerUpdateProduct = async (req, res, next) =>{

  var {sellerId, productId, productName, category, sellOrDemand, job, service, year, locationName, make, model, kilometers, used, sellOrRent, holds, sold, price, brand, imgSrc, desc} = req.body
  try{
    let data = await db.seller.findOne({id: sellerId,"products._id":productId}).then(data=>data).catch(err=>{throw new Error(err)})
    var productId; var productName; var category; var sellOrDemand; var job; var service;var year;var  locationName;var  make;var model;var kilometers;var used;var sellOrRent;var holds;var sold;var price;var brand;var imgSrc;var desc;var date;
    let checkArr = [productId, productName, category, sellOrDemand, job, service, year, locationName, make, model, kilometers, used, sellOrRent, holds, sold, price, brand, imgSrc, desc, date];
    let checkObj = {productId, productName, category, sellOrDemand, job, service, year, locationName, make, model, kilometers, used, sellOrRent, holds, sold, price, brand, imgSrc, desc, date};
    for(let i = 0; i<checkArr.length; i++){
      checkProperty(checkArr[i], Object.keys(checkObj)[i], data, productId);
    }
    let printData = await db.seller.findOneAndUpdate({id: sellerId,"products._id":productId}, {"$set":
    {
      "products.$.holds":holds, 
      "products.$.used":used, 
      "products.$.sellOrRent":sellOrRent, 
      "products.$.productName":productName, 
      "products.$.sellOrDemand":sellOrDemand, 
      "products.$.job":job, 
      "products.$.service":service, 
      "products.$.year":year, 
      "products.$.locationName":locationName, 
      "products.$.make":make, 
      "products.$.model":model, 
      "products.$.kilometers":kilometers, 
      "products.$.sold":sold, 
      "products.$.price":price, 
      "products.$.brand":brand, 
      "products.$.category":category,
      "products.$.imgSrc":imgSrc,
      "products.$.desc":desc,
      "products.$.date":date
    }},{ returnOriginal: false }).then(data=>data)
    res.json(printData)
    // next();
  }catch(err){
    res.status(404).send("not found")
  }
}

const deleteProduct = async (req, res, next)=>{
  const {sellerId, productId} = req.body
  try{
    let data = await db.seller.findByIdAndUpdate(sellerId, {$pull:{products: {"_id": productId}}}).then(data=>data);
    res.json(data)
  }catch(err){
    res.status(404).send("not found")
  }
}
    
module.exports = {deleteSellerById,getSellerById, getProduct, getMySeller, getSeller, pushProductToSeller, sellerUpdateProduct, getFullSellerList, deleteProduct};
    
    
    function unique(arrOfObj, prop){
  let newArr = [];
  arrOfObj.forEach(val=>{
      if(undefined === newArr.find(value=>JSON.stringify(value[prop])===JSON.stringify(val[prop]))){
        newArr.push(val);
      }
    })
    return newArr
  }
  
  function checkProperty(prop,propName, data, productId){
    if(prop===undefined){
      var prop=data.products.find(obj=>{
        return obj["_id"] == productId
    })[propName]
  }
  console.log(propName, prop)
  return prop
}


  // console.log(checkArr)
 /*  if(holds===undefined){var {holds}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(used===undefined){var {used}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(sellOrRent===undefined){var {sellOrRent}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(productName===undefined){var {productName}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(sellOrDemand===undefined){var {sellOrDemand}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(job===undefined){var {job}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(service===undefined){var {service}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(year===undefined){var {year}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(locationName===undefined){var {locationName}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(make===undefined){var {make}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(model===undefined){var {model}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(kilometers===undefined){var {kilometers}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(sold===undefined){var {sold}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(price===undefined){var {price}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(brand===undefined){var {brand}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(category===undefined){var {category}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(imgSrc===undefined){var {imgSrc}=data.products.find(obj=>{
    return obj["_id"] == productId
})}
  if(desc===undefined){var {desc}=data.products.find(obj=>{
    return obj["_id"] == productId
})} */

var mongoose = require("mongoose");

var adminSchema = new mongoose.Schema({
    name:{
      type: String,
      required: "Name cannot be blank!"
    },
    email:{
      type: String,
      required: "Email cannot be blank!"
    },
    block:[{
        userId:
        {type: String}
    }],
    archive:[{
      userId:
      {type: String}
    }]
})

const admin = mongoose.model("admin", adminSchema)



module.exports = admin;
var mongoose = require("mongoose");

var basketSchema = new mongoose.Schema({
        sellerId:{
          type: String,
          required: "SellerId cannot be blank!"},
        customerId:{
          type: String,
          required: "CustomerId cannot be blank!"
        },
        productId:{
          type: String,
          required: "ProductId cannot be blank!"
        },
        date:{
          type:Date,
          default: () => Date.now()
        },
        shipping:{
          type: String,
          enum:["home", "sent","traveling", "arrived"],
          default: "home"
        },
        accepted:{type: Boolean, default: false},
        pieces:{
          type: Number,
          default: 1
        }
        

        
})

const basket = mongoose.model("basket", basketSchema)

module.exports = basket;
var mongoose = require("mongoose");

var customerSchema = new mongoose.Schema({
    name:{
      type: String,
      unique: true,
      required: "Name cannot be blank!"
    },
    email:{
      type: String,
      unique: true,
      required: "Email cannot be blank!"
    },
    password:{
      type: String,
      required: "Password cannot be blank!"
    },
    wishList:[{
      articleId:String,
      articleName:String,
    }],
    intrested:[String]
})

const customer = mongoose.model("customer", customerSchema)

module.exports = customer;
const mongoose = require('mongoose');
mongoose.set("debug", true);
mongoose.connect('mongodb://localhost:27017/webshop', {useNewUrlParser: true,   
   useUnifiedTopology: true})
    .then(()=>{
        console.log("connected successfuly :D")
    })
    .catch(err=>{
        console.log("cant connect", err)
    })


mongoose.Promise = Promise;
module.exports.admin = require("./admin");
module.exports.seller = require("./seller");
// module.exports.customer = require("./customer");
// module.exports.product = require("./product");
module.exports.basket = require("./basket");
var mongoose = require("mongoose");

var productSchema = new mongoose.Schema({
        productName:String,
        category:
        {
          type: String,
          enum: [
            "fruit", "vegetable", "dairy", "meat", 
            "vehicle", "console", "game", "house", 
            "apartment", "smartphone", "pc",
            "work", "productivity", "pool", "tools",
            "forHouse"
          ]
        }
})

const product = mongoose.model("product", productSchema)

module.exports = product;
var mongoose = require("mongoose");

var sellerSchema = new mongoose.Schema({
    name:{
      type: String,
      unique: true,
      required: "Name cannot be blank!"
    },
    email:{
      type: String,
      unique: true,
      required: "Email cannot be blank!"
    },
    password:{
      type: String,
      required: "Password cannot be blank!"
    },
    rating: {
      type: Number,
      default: 0,
      maximum : 5
    },
    date:{
      type:Date,
      default: () => Date.now()
    },
    likes:[
      {
        name: {
          type: String,
          required: "Category name cannot be blank!"
        },
        importance: {
          type: Number,
          maximum : 10
        }
      }
    ],
    sells:[String],
    limit: {
      type: Number,
      maximum : 100
    },
    products:[{ 
      date:{
        type:Date,
        default: () => Date.now()
      },
      sellOrDemand:{
        type: String,
        enum:["sell", "demand"]
      },
      job:String,
      service:String,
      productName:String,
      category:{
        type: String,
        enum: [
          "fruit", "vegetable", "dairy", "meat", 
          "vehicle", "console", "game", "house", 
          "apartment", "smartphone", "pc",
          "work", "productivity", "pool", "tools",
          "forHouse"
        ]
      },
      price: Number,
      desc: String,
      imgSrc:[String],
      brand: String,
      make:String,
      model: String,
      year:Number,
      locationName:String,
      kilometers:Number,
      used:{type: Boolean, default: false},
      sellOrRent:{
        type: String,
        enum:["sell", "rent"]
      },
      holds:{
      type: Number,
      default: 0
      },
      sold:{
        type: Number,
        default: 0
      }
    }]
})

const seller = mongoose.model("seller", sellerSchema)

module.exports = seller;
var mongoose = require("mongoose");

var sellerSchema = new mongoose.Schema({
    sellerId:{
      type: String,
      required: "Company Id cannot be blank!"
    },
    customerId:{
      type: String,
      required: "Customer Id cannot be blank!"
    },
    shippingActive:{
      type: Boolean,
      default: false
    }
})

const seller = mongoose.model("seller", sellerSchema)

module.exports = seller;
const express = require('express');
const router = express.Router();
const db = require('../models');
// const [admin,seller,customer, product] = require("./initial");
// db.admin.insertMany([admin]).then(data=>data);
// db.seller.insertMany([seller]).then(data=>data);


// db.seller.findByIdAndUpdate("61b8f1f9c40e19560da04f74", {$push:{products: {productId:"61b8f18886d8e59adc39c263", productName: "switch", holds: 100}}}).then(data=>data)
// db.seller.findOneAndUpdate({"products.productId":"61b8f18886d8e59adc39c263"}, {"$set":{"products.$.holds":200}}).then(data=>data)



router.get('/', (req, res) => {
	db.admin.find({})
  .then(admin=>{
    res.json(admin);
    console.log(admin)
  })
});

router.get("/:id", (req, res)=>{
  res.send(req.body)
})

router.post('/', (req, res) => {
  res.send(req.body)
});

router.put('/:id', (req, res) => {
  res.send(req.body)
});

router.delete('/:id', (req, res) => {
  res.send(req.body)
});




module.exports = router;
const express = require('express');
const router = express.Router();
const db = require('../models');
const {updateProductShipping, unAcceptProductSell,acceptProductSell, getProductsOfSeller, getProductsOfCustomer, addProductToBasket} = require("../controller/basket.js");
const {authenticateToken} = require("../services/authentication");


// db.seller.findByIdAndUpdate("61b8f1f9c40e19560da04f74", {$push:{baskets: {basketId:"61b8f18886d8e59adc39c263", basketName: "switch", holds: 100}}}).then(data=>data)
// db.seller.findOneAndUpdate({"baskets.basketId":"61b8f18886d8e59adc39c263"}, {"$set":{"baskets.$.holds":200}}).then(data=>data)

db.basket.findByIdAndDelete("61f067ff40d17b2937fde857").then(data=>data)


router.get('/', (req, res) => {
	db.basket.find().then(basket=>{res.json(basket)})
});

router.get("/customer/:customerId", getProductsOfCustomer)
router.get("/seller/:sellerId", getProductsOfSeller)

router.post('/addProductToBasket',authenticateToken, addProductToBasket);
router.post('/acceptProductSell',authenticateToken, acceptProductSell);
router.post('/unAcceptProductSell',authenticateToken, unAcceptProductSell);

router.post('/updateProductShipping',authenticateToken, async (req, res, next)=>{
  try{
    await updateProductShipping(req, res, next)
  }catch(err){
    res.send("noo feedback")
  }
});

router.delete('/:id', (req, res) => {
  res.send(req.body)
});




module.exports = router;
const express = require('express');
const router = express.Router();
const db = require('../models');
const [admin,seller,customer, product] = require("./initial");
// db.admin.insertMany([admin]).then(data=>data);

// db.seller.create({
//   name:"Saladin",
//   email:"saladindacic@gmail.com",
//   intrested:["game", "pc", "tools"]
// }).then(data=>data);


// db.seller.findByIdAndUpdate("61b8f1f9c40e19560da04f74", {$push:{products: {productId:"61b8f18886d8e59adc39c263", productName: "switch", holds: 100}}}).then(data=>data)
// db.seller.findOneAndUpdate({"products.productId":"61b8f18886d8e59adc39c263"}, {"$set":{"products.$.holds":200}}).then(data=>data)



router.get('/', (req, res) => {
	db.customer.find().then(customer=>{res.json(customer)})
});

router.get("/:id", (req, res)=>{
  res.send(req.body)
})

router.post('/', (req, res) => {
  res.send(req.body)
});

router.put('/:id', (req, res) => {
  res.send(req.body)
});

router.delete('/:id', (req, res) => {
  res.send(req.body)
});




module.exports = router;
let admin = {
    name:"Saladin",
    email:"saladindacic@gmail.com",
    block:[],
    archive:[]
}
let seller ={
  name:"Saladin",
  email:"saladindacic@gmail.com",
  products:[]
}
let customer = {
  name:"Saladin",
  email:"saladindacic@gmail.com",
  intrested:["game", "pc", "tools"]
}
let product={
  productName:"switch",
  category:"game"
}


module.exports = [admin, seller, customer, product]


/* {
  admins:[{
    admin_id:{
      type: String,
      required: "ID cannot be blank!"
    },
    name:{
      type: String,
      required: "Name cannot be blank!"
    },
    email:{
      type: String,
      required: "Email cannot be blank!"
    },
    users:[{
      user:{
        user_id: {
          type: String,
          required: "ID cannot be blank!"
        },
        archive: {
          type: Boolean,
          default: false
        },
        block: {
          type: Boolean,
          default: false
        }
      }
    }]
  }],
  sellers:[{
    seller_id: {
      type: String,
      required: "ID cannot be blank!"
    },
    email:{
      type: String,
      required: "Email cannot be blank!"
    },
    fullname: {
      type: String,
      required: "Name cannot be blank!"
    },
    created_date:{
      type: Date,
      default: Date.now
    },
    products:[{
      product_id: {
        type: String,
        required: "ID cannot be blank!"
      },
      name:{
        type: String,
        required: "Name cannot be blank!"
      },
      shipping:{
        type: Boolean
      }
    }],
    category:{
      type: String
    },
  }],
  buyers:[{
    buyer_id: {
      type: String,
      required: "ID cannot be blank!"
    },
    email:{
      type: String,
      required: "Email cannot be blank!"
    },
    fullname: {
      type: String,
      required: "Name cannot be blank!"
    },
    created_date:{
      type: Date,
      default: Date.now
    },
    products:[{
      product_id: {
        type: String,
        required: "ID cannot be blank!"
      },
      name:{
        type: String,
        required: "Name cannot be blank!"
      },
      shipping:{
        type: Boolean
      }
    }],
    interested:[
      category=String
    ]
  }]
} */
const express = require('express');
const router = express.Router();
const db = require('../models');
const {deleteSellerById, getSellerById, deleteProduct,pushProductToSeller, sellerUpdateProduct, getFullSellerList, getSeller, getMySeller, getProduct} = require("../controller/seller");
const {authenticationLogin, sellerRegister, createWebToken, authenticateToken, logOut} = require("../services/authentication");


//GET
router.get("/", getSeller)
router.get('/getSellers', getFullSellerList);
router.get("/getAuthUser", authenticateToken, (req,res)=>{
  try{
    console.log(req.user.name, req.user.id)
    res.json({name: req.user.name, sellerId:req.user.id})
  }catch(err){res.json({data:false})}
});
router.get('/getProduct/:sellerId/:productId', getProduct);
router.get("/getSellerById/:id", getSellerById)
router.get("/:id",authenticateToken, getMySeller)
router.get('/logOut', logOut);


//POST
router.post("/register", sellerRegister, (req,res)=>{
  res.json({successfullyRegiser:true}).then(data=>data).catch(err=>res.send("failed to register", err))
})
router.post("/login", authenticationLogin, createWebToken)
router.post("/addproduct", authenticateToken, pushProductToSeller)

//PUT
router.put("/:id", sellerUpdateProduct)

//DELETE
router.put("/", deleteProduct)
router.delete("/:id", deleteSellerById)




module.exports = router;




// db.seller.findByIdAndUpdate("61b8f1f9c40e19560da04f74", {$push:{products: {productId:"61b8f18886d8e59adc39c263", productName: "switch", holds: 100}}}).then(data=>data)
// db.seller.findByIdAndUpdate("61c1c1a935117df5ec4f36e1", {$pull:{products: {"productId": "61b9c14a3f10e1277b03bd4e"}}}).then(data=>data)


// db.seller.findOneAndUpdate({"products.productId":"61b9c73effd51531d10e8a11"}, {"$set":{"products.$.holds":200, "products.$.sold":100}}).then(data=>data)
const express = require('express');
const router = express.Router();
const db = require('../models');
const [admin,seller,customer, product] = require("./initial");
// db.admin.insertMany([admin]).then(data=>data);
// db.seller.insertMany([seller]).then(data=>data);


// db.seller.findByIdAndUpdate("61b8f1f9c40e19560da04f74", {$push:{products: {productId:"61b8f18886d8e59adc39c263", productName: "switch", holds: 100}}}).then(data=>data)
// db.seller.findOneAndUpdate({"products.productId":"61b8f18886d8e59adc39c263"}, {"$set":{"products.$.holds":200}}).then(data=>data)



router.get('/', (req, res) => {
	db.seller.findById("61b8f1f9c40e19560da04f74").then(seller=>{res.json(seller)})
});

router.get("/:id", (req, res)=>{
  res.send(req.body)
})

router.post('/', (req, res) => {
  res.send(req.body)
});

router.put('/:id', (req, res) => {
  res.send(req.body)
});

router.delete('/:id', (req, res) => {
  res.send(req.body)
});




module.exports = router;
require("dotenv").config();
const db = require('../models');

const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

const createWebToken= async (req, res, next)=>{
  const {username, password} = req.body
  const user = {name: username, password: password}
  const accessToken = jwt.sign(user, process.env.ACCESS_TOKEN_SECRET)
  console.log(`welcome ${username}`)
  res.cookie("loggedUser", accessToken, {maxAge: 7200000, sameSite: "lax", httpOnly: true, secure: false})
  res.json({accessToken:accessToken})
  next();
};
const authenticateToken= async (req, res, next)=>{
  const {loggedUser} = req.cookies
    jwt.verify(loggedUser, process.env.ACCESS_TOKEN_SECRET, async (err, user)=>{
        let response = await db.seller.findOne({name:user.name})
        user.id = response._id
        req.user = user;
        access = true;
        next()
      }).then(data=>{next()}).catch(err=>{ next()})
}
  
const logOut = (req, res, next)=>{
  res.clearCookie('loggedUser');
    res.send('Cookie cleared');
}

const sellerRegister = async (req, res, next) =>{
  const {username, password, email, sells, likes} = req.body
  try{
    // const salt = await bcrypt.genSalt() //može se zamjeniti samo sa brojem 10 u hash funkciji
    const hashedPassword = await bcrypt.hash(password, 10)
      const newUser = await db.seller.create({
        name:username,
        email:email,
        password:hashedPassword,
        sells:sells,
        likes:likes
      }).then(data=>data).catch(err=>{throw new Error(err)})
      res.json(newUser);
      return
      // next();
  }catch(err){res.status(500).send("can't set new user")}
}


const authenticationLogin = async (req, res, next) =>{
  try{
    const {username, password} = req.body

    const adminUser = await db.admin.findOne({name:username}).then(data=>data).catch(err=>{throw new Error(err)})
    const sellerUser = await db.seller.findOne({name:username}).then(data=>data).catch(err=>{throw new Error(err)})
    // const customerUser = await db.customer.findOne({name:username}).then(data=>data).catch(err=>{throw new Error(err)})
    
    const uncrypt= async (user)=>{ 
      await bcrypt.compare(password, user.password, (err, truthy)=>{
        if(err){
          throw new Error(err)
        }else if(truthy){
          // res.send("Successfuly logged in")
          next();
        }else if(!truthy){
          // throw new Error("not allowed")
          res.status(405).send("not allowed")
        }
      })
    }
    if(adminUser !== null){
      uncrypt(adminUser)
    }else if(sellerUser !== null){
      uncrypt(sellerUser)
    }/* else if(customerUser !== null){
      uncrypt(customerUser)
    } */else{
      throw new Error("not allowed")
    }
    
  }catch(err){res.status(405).send("Not Allowed") }
  // next()
}


module.exports = {authenticationLogin, sellerRegister, createWebToken, authenticateToken, logOut};

  

/* const authenticationRegister = async (req, res, next) =>{
  try{
    const {username, password, email, who} = req.body
    // const salt = await bcrypt.genSalt() //može se zamjeniti samo sa brojem 10 u hash funkciji
    const hashedPassword = await bcrypt.hash(password, 10)
    // const user = {username, email, password: hashedPassword}
    if(who === "seller"){
      const newUser = await db.seller.create({
        name:username,
        email:email,
        password:hashedPassword,
        products:[]
      }).then(data=>data).catch(err=>{throw new Error(err)})
      res.json(newUser);
      next();
    }else if(who === "customer"){
      const newUser = await db.seller.create({
        name:username,
        email:email,
        password:hashedPassword,
        intrested:[]
      }).then(data=>data).catch(err=>{throw new Error(err)})
      res.json(newUser);
      next();
    }else{
      throw new Error("are you customer or seller, please input valid information")
    }
    
  }catch(err){res.status(500).send()}
} */

/* const customerRegister = async (req, res, next) =>{
  try{
    const {username, password, email} = req.body
    const hashedPassword = await bcrypt.hash(password, 10)
    const newUser = await db.seller.create({
      name:username,
      email:email,
      password:hashedPassword,
      intrested:[]
    }).then(data=>data).catch(err=>{throw new Error(err)})
    res.json(newUser);
    next();
  }catch(err){res.status(500).send()}
} */
const express = require ("express");
const app = express();

const crospass = app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "http://localhost:3000");
  res.header("Access-Control-Allow-Headers", "X-Requested-With");
  next();
});

module.exports = crospass;
import axios from "axios";
import { TypeOfExpression } from "typescript";

interface updateProductInterfaceProp {
  sellOrRent: "sell" | "rent",
  sellOrDemand: "sell" | "demand",
  price: number,
  used: boolean,
  year: number,
  locationName: string,
  category: string,
  holds: number,
  brand: string,
  make: string,
  model: string,
  desc: string,
  productId: string,
  sellerId: string,
  imgSrc: string[]
}
const updateProduct = async (obj: updateProductInterfaceProp) => {
  // console.log(obj)
  let response = await axios.put(
    `http://localhost:3001/api/seller/${obj.sellerId}`, obj
  );
}

const deleteProduct = async (obj: { sellerId: string, productId: string }) => {
  let response = await axios.put(
    `http://localhost:3001/api/seller/`, obj
  );
}

const getSellers = async () => {
  let response = await axios.get(
    "http://localhost:3001/api/seller/getSellers"
  );
  let sellers = response.data.seller;
  let allProducts = sellers
    .map(
      (objSeller: {
        ["products"]: {}[];
        name: string;
        sellerId: string;
        rating: number;
      }) => {
        let newObj = objSeller.products.map((miniObj: any) => {
          return {
            ...miniObj,
            sellerName: objSeller.name,
            sellerId: objSeller.sellerId,
            rating: objSeller.rating,
            date: miniObj.date.split("T")[0],
          };
        });
        return [newObj];
      }
    )
    .flat(2);
  return (allProducts)
};

const getLoggedUserName = async () => {
  let response = await axios.get(
    "http://localhost:3001/api/seller/getAuthUser",
    { withCredentials: true }
  );
  // console.log(response)
  return response;
}
const getSellerById = async (id: string | undefined) => {
  if (id === undefined) id = "";
  let response = await axios.get(
    `http://localhost:3001/api/seller/getSellerById/${id}`,
    { withCredentials: true }
  );
  // console.log(response)
  return response;
}

const getCustomerBasketById = async (id: string) => {
  let response = await axios.get(
    `http://localhost:3001/api/basket/customer/${id}`,
    { withCredentials: true }
  );
  // console.log(response)
  return response;
}
const getSellerBasketById = async (id: string) => {
  let response = await axios.get(
    `http://localhost:3001/api/basket/seller/${id}`,
    { withCredentials: true }
  );
  // console.log(response)
  return response;
}

const getProduct = async (sellerId: string, productId: string) => {
  // localhost:3001/api/seller/getProduct/61e5a443b09123931f5a42e0/61e891eaaea9b3c9e2b24ff5
  let response = await axios.get(
    `http://localhost:3001/api/seller/getProduct/${sellerId}/${productId}`,
    { withCredentials: true }
  );
  // console.log(response)
  return response;
}


const addProductToBasket = async (sellerId: string, productId: string, pieces: number = 1) => {
  // localhost:3001/api/seller/getProduct/61e5a443b09123931f5a42e0/61e891eaaea9b3c9e2b24ff5
  let response = await axios.post(
    `http://localhost:3001/api/basket/addProductToBasket`, { sellerId, productId, pieces },
    { withCredentials: true }
  );
  // console.log(response)
  return response;
}
const acceptProductSell = async (sellerId: string, productId: string) => {
  // localhost:3001/api/seller/getProduct/61e5a443b09123931f5a42e0/61e891eaaea9b3c9e2b24ff5
  let response = await axios.post(
    `http://localhost:3001/api/basket/acceptProductSell`, { sellerId, productId },
    { withCredentials: true }
  );
  // console.log(response)
  return response;
}
const unAcceptProductSell = async (sellerId: string, productId: string) => {
  // localhost:3001/api/seller/getProduct/61e5a443b09123931f5a42e0/61e891eaaea9b3c9e2b24ff5
  let response = await axios.post(
    `http://localhost:3001/api/basket/unAcceptProductSell`, { sellerId, productId },
    { withCredentials: true }
  );
  // console.log(response)
  return response;
}
const updateProductShipping = async (sellerId: string, productId: string, shipping: "home" | "sent" | "traveling" | "arrived") => {

  try {
    let response = await axios.post(
      `http://localhost:3001/api/basket/updateProductShipping`, { sellerId, productId, shipping },
      { withCredentials: true }
    );

    return response;
  } catch (err) {
    console.log("err")
  }
  // console.log(response)
}

const intitialDataSetDetailedCard = async (setAd: any, sellerId: any, productId: any) => {
  try {
    let response = await axios.get(
      `http://localhost:3001/api/seller/getProduct/${sellerId}/${productId}`,
      { withCredentials: true }
    );
    setAd(response.data);
  } catch (err) {
    console.log(err);
  }
};

const logIn = async (userName: string, password: string) => {
  await axios.post(
    "http://localhost:3001/api/seller/login",
    {
      username: userName,
      password: password,
    },
    { withCredentials: true }
  );
}

const logOut = async () => {
  await axios.get(
    "http://localhost:3001/api/seller/logOut",
    { withCredentials: true }
  );
}


export { addProductToBasket, unAcceptProductSell, acceptProductSell, updateProductShipping, getProduct, getSellerBasketById, getCustomerBasketById, getSellerById, deleteProduct, getSellers, getLoggedUserName, intitialDataSetDetailedCard, logIn, logOut, updateProduct };
import React, { useEffect, useContext, useRef, useState } from "react";
import { ProductContext } from "../../context/ProductContext";
import { useNavigate } from "react-router-dom";

const BasicInformation = () => {
  const { basicInfoTab, setBasicInfoTab } = useContext(ProductContext);
  const formRef = useRef() as React.MutableRefObject<HTMLFormElement>;
  const navigate = useNavigate();

  useEffect(() => {
    radio1.current?.click();
    if (Object.keys(basicInfoTab).length !== 0) {
      setBasicObj(basicInfoTab);
    }
  }, []);

  const radio1 = useRef<HTMLInputElement | null>(null);
  const radio2 = useRef<HTMLInputElement | null>(null);
  // const radio3 = useRef<HTMLInputElement | null>(null);
  const [radio, setRadio] = useState("");
  const [basicObj, setBasicObj] = useState<{
    productName: string;
    category: string;
    year: number;
    locationName: string;
  }>({
    productName: "",
    category: "",
    year: 2021,
    locationName: "Sarjevo",
  });
  const handleChange = (
    evt:
      | React.ChangeEvent<HTMLInputElement>
      | (React.ChangeEvent<HTMLSelectElement> & {
          target: { name: string | number };
        })
  ) => {
    setBasicObj(
      (
        oldObj: any
      ): {
        productName: string;
        category: string;
        year: number;
        locationName: string;
      } => {
        return { ...oldObj, [evt.target.name]: evt.target.value };
      }
    );
  };

  const handleSubmit = (evt: React.MouseEvent<HTMLButtonElement>) => {
    evt.preventDefault();
    let sellOrDemand;
    radio === "radio1" ? (sellOrDemand = "sell") : (sellOrDemand = "demand");
    radio === "radio2" ? (sellOrDemand = "demand") : (sellOrDemand = "sell");
    try {
      setBasicInfoTab({
        sellOrDemand: sellOrDemand,
        productName: basicObj.productName,
        category: basicObj.category,
        year: basicObj.year,
        locationName: basicObj.locationName,
      });
      navigate("/addProduct/price-image-desc");
    } catch (err) {
      console.log("can't set property", err);
    }
    // console.log(radio);
    // console.log(basicObj);
  };

  const switchCheck = (
    evt: React.ChangeEvent<HTMLInputElement> & { target: { name: string } }
  ) => {
    let arr = ["radio1", "radio2" /* , "radio3" */];
    arr.forEach((radioInput) => {
      if (radioInput === evt.target.name) {
        let newArr = arr.filter((val) => val !== radioInput);
        newArr.forEach((notRadioInput) => {
          eval(notRadioInput).current.checked = null;
        });
      }
    });
    setRadio(evt.target.name);
  };

  const categoryRef = useRef<string[]>([
    "",
    "fruit",
    "vegetable",
    "dairy",
    "meat",
    "vehicle",
    "console",
    "game",
    "house",
    "apartment",
    "smartphone",
    "pc",
    "work",
    "category",
    "pool",
    "tools",
    "forHouse",
  ]);
  const citiesRef = useRef<string[]>([
    "Sarajevo",
    "Čajniče",
    "Čapljina",
    "Čelinac",
    "Čelić",
    "Čitluk",
    "Banja Luka",
    "Banovići",
    "Berkovići",
    "Bihać",
    "Bijeljina",
    "Bileća",
    "Bosanska Krupa",
    "Bosanski Petrovac",
    "Bosansko Grahovo",
    "Bratunac",
    "Breza",
    "Brod",
    "Brčko",
    "Bugojno",
    "Busovača",
    "Bužim",
    "Cazin",
    "Derventa",
    "Doboj",
    "Dobratići",
    "Domaljevac",
    "Donji Dubovik",
    "Donji Vakuf",
    "Donji Žabar",
    "Drinić",
    "Drvar",
    "Fojnica",
    "Foča",
    "Gacko",
    "Glamoč",
    "Goražde",
    "Gornji Ribnik",
    "Gornji Vakuf",
    "Gradačac",
    "Gradiška",
    "Gračanica",
    "Grude",
    "Hadžići",
    "Han Pijesak",
    "Hreša",
    "Ilidža",
    "Ilijaš",
    "Jablanica",
    "Jajce",
    "Jezero",
    "Kakanj",
    "Kalesija",
    "Kalinovik",
    "Kiseljak",
    "Kladanj",
    "Ključ",
    "Klokotnica",
    "Kneževo",
    "Konjic",
    "Kopači",
    "Kostajnica",
    "Kotor Varoš",
    "Kozarska Dubica",
    "Kreševo",
    "Kupres",
    "Laktaši",
    "Livno",
    "Ljubinje",
    "Ljubuški",
    "Lopare",
    "Lukavac",
    "Lukavica",
    "Maglaj",
    "Matuzići",
    "Milići",
    "Modriča",
    "Mostar",
    "Mrkonjić Grad",
    "Neum",
    "Nevesinje",
    "Novi Grad",
    "Novi Travnik",
    "Novo Selo",
    "Odžak",
    "Olovo",
    "Omanjska",
    "Orašje",
    "Osmaci",
    "Oštra Luka",
    "Pale",
    "Pelagićevo",
    "Petrovo",
    "Posušje",
    "Potoci",
    "Prača",
    "Prijedor",
    "Prnjavor",
    "Prozor",
    "Ravno",
    "Rogatica",
    "Rudo",
    "Sanski Most",
    "Sapna",
    "Sarajevo",
    "Sokolac",
    "Srbac",
    "Srebrenica",
    "Srebrenik",
    "Stanari",
    "Stolac",
    "Šamac",
    "Šekovići",
    "Šipovo",
    "Široki Brijeg",
    "Teočak",
    "Teslić",
    "Tešanj",
    "Tomislavgrad",
    "Travnik",
    "Trebinje",
    "Trnovo",
    "Tuzla",
    "Ugljevik",
    "Vareš",
    "Velika Kladuša",
    "Visoko",
    "Vitez",
    "Višegrad",
    "Vlasenica",
    "Vogošća",
    "Vukosavlje",
    "Zavidovići",
    "Zenica",
    "Zvornik",
    "Žepče",
    "Živinice",
  ]);
  const categoryEnums = categoryRef.current.map((oneOption, i) => {
    return (
      <option key={i} value={oneOption}>
        {oneOption}
      </option>
    );
  });
  const citiesEnums = citiesRef.current.map((oneOption, i) => {
    return (
      <option key={i} value={oneOption}>
        {oneOption}
      </option>
    );
  });

  return (
    <form
      ref={formRef}
      // onSubmit={handleSubmit}
      className="Product__Routes--BasicInfo BasicInfo"
    >
      <div className="BasicInfo__radio">
        <div className="BasicInfo__radio--divs">
          <h3>Sell </h3>
          <input
            ref={radio1}
            onChange={switchCheck}
            type="radio"
            name="radio1"
            value="prodaja"
            // defaultChecked
          />
        </div>
        <div className="BasicInfo__radio--divs">
          <h3>Demand</h3>
          <input
            ref={radio2}
            onChange={switchCheck}
            type="radio"
            name="radio2"
            value="potražnja"
          />
        </div>
        {/*         <div className="BasicInfo__radio--divs">
          <h3>iznajmljivanje</h3>
          <input
            ref={radio3}
            onChange={switchCheck}
            type="radio"
            name="radio3"
            value="iznajmljivanje"
          />
        </div> */}
      </div>
      <div className="BasicInfo__inputs">
        <div className="BasicInfo__inputs--div div1">
          <div className="BasicInfo__inputs--div-name">
            <h3>Name of product</h3>
            <input
              onChange={handleChange}
              value={basicObj.productName}
              type="text"
              name="productName"
              required
            />
          </div>
          <div className="BasicInfo__inputs--div-year">
            <h3>Year</h3>
            <input
              onChange={handleChange}
              // value={basicObj.year}
              type="number"
              name="year"
              defaultValue={2021}
            />
          </div>
        </div>
        <div className="BasicInfo__inputs--div div2">
          <div className="BasicInfo__inputs--div-category">
            <h3>Category</h3>
            <select
              onChange={handleChange}
              required
              value={basicObj.category}
              name="category"
            >
              {categoryEnums}
            </select>
          </div>
          <div className="BasicInfo__inputs--div-location">
            <h3>Location</h3>
            <select
              onChange={handleChange}
              value={basicObj.locationName}
              name="locationName"
            >
              {citiesEnums}
            </select>
          </div>
        </div>
      </div>
      <div className="Product__MainBtn btn">
        <button
          onClick={() => {
            navigate("/addProduct/category");
          }}
          type="submit"
        >
          Back
        </button>
        <button onClick={handleSubmit} type="submit">
          Next
        </button>
      </div>
    </form>
  );
};

export default BasicInformation;
import React, { useContext } from "react";
import { ProductContext } from "../../context/ProductContext";
import { useNavigate } from "react-router-dom";

const Category: React.FC = () => {
  const { setCategoryTab } = useContext(ProductContext);
  const navigate = useNavigate();

  const handleClick = (
    evt: React.MouseEvent<HTMLButtonElement> & { target: { innerHTML: string } }
  ) => {
    try {
      setCategoryTab(evt.target.innerHTML.toLocaleLowerCase());
      navigate("/addProduct/basic-information");
    } catch (err) {
      console.log("can't set property", err);
    }
  };
  return (
    <form
      onSubmit={(evt) => evt.preventDefault()}
      className="Product__Routes--Category"
    >
      <div className="Prodaja Category__divs">
        <h3 className="h4__tag Category__tags">Sell</h3>
        <p className="p__tag Category__ps">
          Želim da nešto prodam po fiksnoj cijeni, po dogovoru ili da mi ljudi
          šalju ponude.
        </p>
        <button onClick={handleClick} className="Category__btns Product--btn">
          Sell
        </button>
      </div>
      <div className="Iznajmljivanje Category__divs">
        <h3 className="h4__tag Category__tags">Rent</h3>
        <p className="p__tag Category__ps">
          Želim da nekome iznajmim nekretninu na određeno vrijeme.
        </p>
        <button
          onClick={handleClick}
          className="Category__btns Iznajmljivanje--btn"
        >
          Rent
        </button>
      </div>
      {/*       <div className="Posao Category__divs">
        <h3 className="h4__tag Category__tags">Posao</h3>
        <p className="p__tag Category__ps">Želim da objavim posao</p>
        <a className="Category__btns Posao--btn">Objavite posao</a>
      </div>
      <div className="Usluga Category__divs">
        <h3 className="h4__tag Category__tags">Servis ili Usluga</h3>
        <p className="p__tag Category__ps">
          Želim da objavim servis ili uslugu koju nudim.
        </p>
        <a className="Category__btns Usluga--btn">Objavite servis ili uslugu</a>
      </div> */}
    </form>
  );
};

export default Category;
import React, { useContext, useState, useEffect } from "react";
import { ProductContext } from "../../context/ProductContext";
import { useNavigate } from "react-router-dom";

const PriceImageDesc: React.FC = () => {
  const { pidTab, setPidTab } = useContext(ProductContext);
  const navigate = useNavigate();
  const [numOfImgInputs, setNumOfImgInputs] = useState([0]);

  const [baseObj, setBaseObj] = useState<{
    price?: number;
    holds: number;
    sold: number;
    brand: string;
    make: string;
    model: string;
    imgSrc: string[];
    used: boolean;
    desc: string;
  }>({
    price: 0,
    holds: 1,
    sold: 0,
    brand: "",
    make: "",
    model: "",
    imgSrc: [],
    used: false,
    desc: "",
  });

  useEffect(() => {
    if (Object.keys(pidTab).length !== 0) {
      setBaseObj(pidTab);
      pidTab.imgSrc.forEach((val: number, i: number) => {
        if (val === 99999) {
          console.log("ignore this line");
        }
        if (i !== 0) {
          setNumOfImgInputs((oldVal) => [...oldVal, 0]);
        } else {
          setNumOfImgInputs([0]);
        }
      });
    }
    setBaseObj((oldObj) => {
      return {
        ...oldObj,
        imgSrc: [],
      };
    });
  }, []);

  const handleUsed = (evt: React.ChangeEvent<HTMLInputElement>) => {
    setBaseObj((oldObj) => {
      return { ...oldObj, used: !oldObj.used };
    });
  };
  const handleImage = (
    evt: React.ChangeEvent<HTMLInputElement> & { target: { key: string } }
  ) => {
    if (evt.target.key === "") {
      setBaseObj((oldObj) => {
        return {
          ...oldObj,
          imgSrc: oldObj.imgSrc.slice(0, oldObj.imgSrc.length - 1),
        };
      });
    }
    setBaseObj((oldObj) => {
      return { ...oldObj, imgSrc: [...oldObj.imgSrc, evt.target.value] };
    });
  };
  const handleImageDeletion = (evt: React.MouseEvent<HTMLAnchorElement>) => {
    setBaseObj((oldObj) => {
      return {
        ...oldObj,
        imgSrc: oldObj.imgSrc.slice(0, oldObj.imgSrc.length - 1),
      };
    });
  };
  const handleChange = (
    evt:
      | React.ChangeEvent<HTMLInputElement>
      | React.ChangeEvent<HTMLTextAreaElement>
  ) => {
    if (evt.target.name === "imgSrc" || evt.target.name === "used") return;
    setBaseObj((oldObj) => {
      return { ...oldObj, [evt.target.name]: evt.target.value };
    });
  };

  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>) => {
    evt.preventDefault();
    try {
      setPidTab(baseObj);
      navigate("/addProduct/publish");
    } catch (err) {
      console.log("can't set property", err);
    }
  };

  const renderInputs = numOfImgInputs.map((num, i) => {
    return (
      <input
        key={i}
        onChange={handleImage}
        name="imgSrc"
        className="file"
        type="text"
        placeholder="sugested"
        // defaultValue={baseObj.imgSrc[i]}
      />
    );
  });
  return (
    <form
      onSubmit={handleSubmit}
      className="Product__Routes--PriceImgDesc PriceImgDesc"
    >
      <div className="PriceImgDesc__inputs">
        <div className="PriceImgDesc__inputs--div">
          <div className="PriceImgDesc__inputs--div-number">
            <div>
              <h3>Price</h3>
              <input
                onChange={handleChange}
                name="price"
                type="number"
                value={baseObj.price}
                required
              />
            </div>
            <div>
              <h3>Holds</h3>
              <input
                onChange={handleChange}
                name="holds"
                type="number"
                placeholder="optional"
                value={baseObj.holds}
              />
            </div>
            <div>
              <h3>Sold </h3>
              <input
                onChange={handleChange}
                name="sold"
                type="number"
                placeholder="optional"
                value={baseObj.sold}
              />
            </div>
          </div>
          <div className="PriceImgDesc__inputs--div-text">
            <div>
              <h3>Brand </h3>
              <input
                onChange={handleChange}
                name="brand"
                placeholder="optional"
                value={baseObj.brand}
              />
            </div>
            <div>
              <h3>Make </h3>
              <input
                onChange={handleChange}
                name="make"
                placeholder="optional"
                value={baseObj.make}
              />
            </div>
            <div>
              <h3>Model </h3>
              <input
                onChange={handleChange}
                name="model"
                placeholder="optional"
                value={baseObj.model}
              />
            </div>
          </div>
          <div className="PriceImgDesc__inputs--div-file-new">
            <div className="file">
              <div className="file__inputs">
                <h3>Image </h3>
                {renderInputs}
              </div>
              <a
                className="moreInputs"
                onClick={() => {
                  setNumOfImgInputs((preVal) => {
                    return [...preVal, 0];
                  });
                }}
              >
                More img?
              </a>
              <a
                className="moreInputs"
                onClick={(evt) => {
                  handleImageDeletion(evt);
                  setNumOfImgInputs((preVal) => {
                    if (preVal.length > 1) {
                      return preVal.slice(0, preVal.length - 1);
                    } else {
                      return [];
                    }
                  });
                }}
              >
                X
              </a>
            </div>
            <div className="new">
              <h3>New</h3>
              <input onChange={handleUsed} name="used" type="checkbox" />
            </div>
          </div>
          <div className="PriceImgDesc__inputs--div-textArea">
            <div>
              <h3>Description {" (sugested)"}</h3>
              <textarea
                onChange={handleChange}
                name="desc"
                value={baseObj.desc}
              />
            </div>
          </div>
        </div>
      </div>
      <div className="Product__MainBtn btn">
        <button
          onClick={() => {
            navigate("/addProduct/basic-information");
          }}
        >
          Back
        </button>
        <button type="submit">Next</button>
      </div>
    </form>
  );
};

export default PriceImageDesc;
import axios from "axios";
import React, { useContext, useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { getSellers } from "../../api/api";

import { ProductContext } from "../../context/ProductContext";
import { ProfileDetailContext } from "../../context/MainContext";
const Publish: React.FC = () => {
  const [mainImg, setMainImg] = useState(0);
  const { ad, setAd } = useContext<{
    ad: {
      sellOrRent: string;
      sellOrDemand: string;
      productName: string;
      category: string;
      year: number;
      locationName: string;
      price: number;
      holds: number;
      sold: number;
      brand: string;
      make: string;
      model: string;
      imgSrc: string[];
      used: boolean;
      desc: string;
    };
    setAd: React.Dispatch<React.SetStateAction<{}>>;
  }>(ProductContext);
  const { rerender, setRerender } = useContext(ProfileDetailContext);
  let navigate = useNavigate();

  // useEffect(() => {
  //   console.log("hitt", ad.imgSrc.length);
  //   if (ad.imgSrc.length === 0) {
  //     setAd((oldObj) => {
  //       return {
  //         ...oldObj,
  //         imgSrc: [
  //           "https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Antu_insert-image.svg/1200px-Antu_insert-image.svg.png",
  //         ],
  //       };
  //     });
  //   }
  // }, []);
  const handleSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {
    evt.preventDefault();
    try {
      let response = await axios.post(
        "http://localhost:3001/api/seller/addproduct",
        ad,
        { withCredentials: true }
      );
      setAd({});
      setRerender(!rerender);
      console.log(response);
      navigate("/");
      window.location.reload();
    } catch (err) {
      setAd({});
      setRerender(!rerender);
      console.log(err);
      navigate("/");
      window.location.reload();
    }
  };
  let renderImages;
  try {
    renderImages = ad.imgSrc.map((link, i) => {
      return <img onClick={() => setMainImg(i)} key={i} src={link} />;
    });
  } catch (err) {}

  return (
    <form onSubmit={handleSubmit} className="Product__Routes--Publish Publish">
      <div className="Publish__images">
        <div className="Publish__images--main">
          {renderImages !== undefined && renderImages[mainImg]}
        </div>
        <div className="Publish__images--list">{renderImages}</div>
      </div>
      <div className="Publish__text">
        <div className="Publish__text--specs">
          {ad.sellOrDemand === "demand" ? (
            <p>
              I am looking to{" "}
              {` ${ad.sellOrRent === "sell" ? "buy" : "loan"} ${ad.brand} ${
                ad.productName
              } ${ad.year}`}{" "}
            </p>
          ) : (
            <p>
              I am{" "}
              {` ${ad.sellOrRent === "sell" ? "selling" : "renting"} ${
                ad.brand
              } ${ad.productName} ${ad.year}`}{" "}
            </p>
          )}
          <p>Product is: {ad.used ? "New" : "Used"}</p>
          <p>For: {ad.price} KM</p>
          <p>From: {ad.locationName}</p>
          <p>Category: {ad.category}</p>
          <p>In stock: {ad.holds}</p>
          <p>I have sold: {ad.sold}</p>
          <p>Brand: {ad.brand}</p>
          <p>Make: {ad.make}</p>
          <p>Model: {ad.model}</p>
        </div>
        <p>DETAILED</p>
        <div className="Publish__text--desc">
          <p>{ad.desc}</p>
        </div>
        <div className="Product__MainBtn btn Publish__text--btn">
          <button
            onClick={() => {
              navigate("/addProduct/price-image-desc");
            }}
          >
            Back
          </button>
          <button type="submit">Publish</button>
        </div>
      </div>
    </form>
  );
};

export default Publish;
import React, { useContext, useEffect, useState } from "react";
import {
  getCustomerBasketById,
  getProduct,
  getSellerBasketById,
  updateProductShipping,
  unAcceptProductSell,
  acceptProductSell,
  addProductToBasket,
} from "../api/api";
import { ProfileDetailContext } from "../context/MainContext";

interface BasketProps {
  toggleShowBasket: boolean;
  setToggleShowBasket: React.Dispatch<React.SetStateAction<boolean>>;
}

interface ProductInterface extends FillProduct {
  _id: string;
  brand: string;
  category: string;
  date: string;
  desc: string;
  imgSrc: string[];
  locationName: string;
  make: string;
  model: string;
  price: number;
  productName: string;
  used: boolean;
  year: number;
  productId?: string;
  moddedDate?: string;
}

interface FillProduct {
  accepted: boolean;
  purchasedDate: string;
  pieces: number;
  shipping: string;
  purchaseId: string;
}

const Basket: React.FC<BasketProps> = ({
  toggleShowBasket,
  setToggleShowBasket,
}) => {
  const {
    loggedSellerInfo,
    createProductDetailArr,
    productDetailArr,

    customerBasketToBuy,
    setCustomerBasketToBuy,
  } = useContext(ProfileDetailContext);

  const [renderPurchasedItems, setRenderPurchasedItems] =
    useState<JSX.Element[]>();
  const [buySell, setBuySell] = useState<"buy" | "sell">("buy");

  const [customerBasketHome, setCustomerBasketHome] = useState<
    {
      sellerId: string;
      customerId: string;
      productId: string;
      shipping: string;
      accepted: boolean;
      pieces: number;
      date: string;
    }[]
  >();
  const [sellerBasketHomeExpended, setSellerBasketHomeExpended] =
    useState<ProductInterface[]>();

  const [boughtDetailArrExpended, setBoughtDetailArrExpended] =
    useState<{}[]>();
  const [soldDetailArrExpended, setSoldDetailArrExpended] = useState<{}[]>();

  const [rerender, setRerender] = useState(false);
  const [rerender2, setRerender2] = useState(false);

  //Rerender effect
  useEffect(() => {
    setTimeout(() => {
      setRerender(!rerender);
    }, 100);
  }, []);

  //Provide data from database for boy and sell busket
  useEffect(() => {
    (async function provideDataForBasketCustomer() {
      if (loggedSellerInfo !== undefined) {
        let response1 = await getCustomerBasketById(loggedSellerInfo.sellerId);
        // let response2 = await getSellerBasketById(loggedSellerInfo.sellerId);
        if (response1.data !== "no item avaliable") {
          let arr: string[] = [];
          response1.data.forEach((obj: any) => {
            arr.push(obj.productId);
          });
          createProductDetailArr(response1.data[0].sellerId, arr);
          setCustomerBasketHome(response1.data);
          // setCustomerBasket(response1.data);
        }
        // console.log(response1.data);
      }
    })();
    (async function provideDataForBasketSeller() {
      if (loggedSellerInfo !== undefined) {
        let response1 = await getSellerBasketById(loggedSellerInfo.sellerId);
        // let response2 = await getSellerBasketById(loggedSellerInfo.sellerId);
        if (response1.data !== "no item avaliable") {
          let arr: string[] = [];
          response1.data.forEach((obj: any) => {
            arr.push(obj.productId);
          });
          createProductDetailArr(response1.data[0].sellerId, arr);
          // setSellerBasket(response1.data);
        }
        let productDataDetails: ProductInterface[] = [];
        response1.data.forEach(async (obj: any) => {
          let response2 = await getProduct(
            loggedSellerInfo.sellerId,
            obj.productId
          );
          // console.log({ ...response2.data, ...obj });
          productDataDetails.push({ ...response2.data, ...obj });
        });

        // console.log(productDataDetails);
        setSellerBasketHomeExpended(productDataDetails);

        // console.log(response1.data);
      }
    })();
  }, [rerender]);

  //Transform data to be able to use it in render
  useEffect(() => {
    (function renderPurchasedItems() {
      if (
        productDetailArr !== undefined &&
        customerBasketHome !== undefined &&
        buySell !== "sell"
      ) {
        let productDetailArrExpended: {}[] = [];
        productDetailArr.forEach((obj: ProductInterface) => {
          let objforFillProduct = customerBasketHome.find((object: any) => {
            // console.log({ productDetailArr: obj, customerBasketHome: object });
            return object.productId === obj._id;
          });
          if (objforFillProduct !== undefined) {
            productDetailArrExpended.push({
              ...obj,
              accepted: objforFillProduct.accepted,
              purchasedDate: objforFillProduct.date,
              pieces: objforFillProduct.pieces,
              shipping: objforFillProduct.shipping,
              purchaseId: objforFillProduct.productId,
            });
          }
        });
        setBoughtDetailArrExpended(productDetailArrExpended);
        console.log(productDetailArrExpended);
        console.log("bought items filled");
      }
      if (
        productDetailArr !== undefined &&
        sellerBasketHomeExpended !== undefined &&
        buySell !== "buy"
      ) {
        let productDetailArrExpended: {}[] = [];
        productDetailArr.forEach((obj: ProductInterface) => {
          let objforFillProduct = sellerBasketHomeExpended.find(
            (object: any) => {
              // console.log(object.productId, obj._id);
              return object.productId === obj._id;
            }
          );
          if (objforFillProduct !== undefined) {
            productDetailArrExpended.push({
              ...obj,
              accepted: objforFillProduct.accepted,
              purchasedDate: objforFillProduct.date,
              pieces: objforFillProduct.pieces,
              shipping: objforFillProduct.shipping,
              purchaseId: objforFillProduct._id,
            });
          }
        });
        setSoldDetailArrExpended(productDetailArrExpended);
        console.log("sold items filled");
      }
    })();
  }, [rerender, buySell, rerender2]);

  //Accept selling to one user
  const handleAcceptance = (
    evt: React.MouseEvent<HTMLButtonElement>,
    productId: string | undefined,
    idx: number
  ) => {
    evt.preventDefault();

    if (productId) {
      acceptProductSell(loggedSellerInfo.sellerId, productId);

      setSellerBasketHomeExpended((oldObjArr) => {
        if (oldObjArr !== undefined) {
          let newArrObj = oldObjArr.map((obj: any, i: number) => {
            let typedObj = obj as ProductInterface;
            if (idx === i) {
              typedObj.accepted = true;
            }
            return typedObj;
          });
          return newArrObj;
        }
      });
      setSoldDetailArrExpended((oldObjArr) => {
        if (oldObjArr !== undefined) {
          let newArrObj = oldObjArr.map((obj: any, i: number) => {
            let typedObj = obj as ProductInterface;
            if (idx === i) {
              typedObj.accepted = true;
            }
            return typedObj;
          });
          return newArrObj;
        }
      });

      // setRerender2(!rerender2);
    }
  };
  //Update shipping in 4 variations home, sent, traveling, arrived
  const updateShipping = (
    evt: React.MouseEvent<HTMLHeadingElement>,
    productId: string,
    shipping: "home" | "sent" | "traveling" | "arrived",
    idx: number
  ) => {
    // console.log(productId);
    updateProductShipping(loggedSellerInfo.sellerId, productId, shipping);
    setRerender2(rerender2);
    setSoldDetailArrExpended((oldObjArr) => {
      if (oldObjArr !== undefined) {
        let newArrObj = oldObjArr.map((obj: any, i: number) => {
          let typedObj = obj as ProductInterface;
          if (idx === i) {
            typedObj.shipping = shipping;
          }
          return typedObj;
        });
        return newArrObj;
      }
    });
  };

  const handleBuyItem = async (
    evt: React.MouseEvent<HTMLButtonElement>,
    obj: {}
  ) => {
    evt.preventDefault();
    let typedObj = obj as {
      sellerId: string;
      productId: string;
      pieces: number;
      price: number;
      productName: string;
      imgSrc: string;
    };
    // console.log(typedObj);
    addProductToBasket(typedObj.sellerId, typedObj.productId, typedObj.pieces);
    setCustomerBasketToBuy((oldArrOfObj: {}[]) => {
      return oldArrOfObj.filter((obj: any) => {
        return obj.productId !== typedObj.productId;
      });
    });

    setBoughtDetailArrExpended((oldArrOfObj) => {
      var newDateArr = [];
      newDateArr.push(new Date().toLocaleDateString().split("/")[2]);
      newDateArr.push(new Date().toLocaleDateString().split("/")[0]);
      newDateArr.push(new Date().toLocaleDateString().split("/")[1]);
      if (oldArrOfObj !== undefined)
        return [
          ...oldArrOfObj,
          {
            imgSrc: [typedObj.imgSrc],
            accepted: false,
            price: typedObj.price,
            pieces: typedObj.pieces,
            productName: typedObj.productName,
            moddedDate: newDateArr.join("-"),
            productId: typedObj.productId,
            _id: typedObj.productId,
          },
        ];
    });
  };

  const renderCustomerBasketToBuy = customerBasketToBuy.map(
    (obj: any, i: string) => {
      let typedObj = obj as {
        sellerId: string;
        productId: string;
        pieces: number;
        price: number;
        productName: string;
        imgSrc: string;
      };
      return (
        <form key={i}>
          <div key={i} className="itemDiv">
            <div className="itemDiv__div1">
              <img src={`${typedObj.imgSrc}`} alt="" />
              <h3>{typedObj.productName}</h3>
            </div>
            <div className="itemDiv__div2">
              <div className="itemDiv__div2--price">
                <h3>{`X ${typedObj.pieces}`}</h3>
                <h3>{typedObj.price * typedObj.pieces}KM</h3>
              </div>
              <div className="itemDiv__div2--buttons">
                <button>Remove</button>
                <button
                  onClick={(evt) => {
                    handleBuyItem(evt, typedObj);
                  }}
                >
                  Buy
                </button>
              </div>
            </div>
          </div>
          <hr />
        </form>
      );
    }
  );
  const renderSellerBasketToSell = sellerBasketHomeExpended?.map(
    (obj: any, i: any) => {
      // console.log(sellerBasketHomeExpended);
      let typedObj = obj as ProductInterface;
      if (!typedObj.accepted) {
        return (
          <div key={i}>
            <div key={i} className="itemDiv">
              <div className="itemDiv__div1">
                <img src={`${typedObj.imgSrc[0]}`} alt="" />
                <h3>{typedObj.productName}</h3>
              </div>
              <div className="itemDiv__div2">
                <div className="itemDiv__div2--price">
                  <h3>{`X ${typedObj.pieces}`}</h3>
                  <h3>{typedObj.price * typedObj.pieces}KM</h3>
                </div>
                <div className="itemDiv__div2--buttons">
                  <button
                    onClick={(evt) =>
                      handleAcceptance(evt, typedObj.productId, i)
                    }
                    id="accept"
                  >
                    Accept
                  </button>
                </div>
              </div>
            </div>
            <hr />
          </div>
        );
      }
    }
  );

  const renderBoughtItemsFromBackend = boughtDetailArrExpended?.map(
    (obj: any, i: number) => {
      let typedObj = obj as ProductInterface;

      return (
        <div key={i} className="itemDiv">
          <div className="itemDiv__div1">
            <img src={`${typedObj.imgSrc[0]}`} alt="" />
            <div>
              <h3>{typedObj.productName}</h3>
              {typedObj.moddedDate !== undefined ? (
                <h4>{`Purcashed: ${typedObj.moddedDate}`}</h4>
              ) : (
                <h4>{`Purcashed: ${typedObj.purchasedDate
                  .split("T")[0]
                  .toString()}`}</h4>
              )}
            </div>
          </div>
          <div className="itemDiv__div2">
            <div className="itemDiv__div2--price">
              <h3>{`X ${typedObj.pieces}`}</h3>
              <h3>{`${typedObj.price}KM`}</h3>
            </div>
            <div className="itemDiv__div2--shipping">
              {typedObj.accepted ? (
                <h3>Shipping: {typedObj.shipping}</h3>
              ) : (
                <h3>Accepted: Not</h3>
              )}
            </div>
          </div>
        </div>
      );
    }
  );

  const renderSoldItemsFromBackend = soldDetailArrExpended?.map(
    (obj: any, i: number) => {
      let typedObj = obj as ProductInterface;
      if (typedObj.accepted) {
        return (
          <div id="sold-box" key={i} className="itemDiv">
            <div className="itemDiv__div1">
              <img src={`${typedObj.imgSrc[0]}`} alt="" />
              <div>
                <h3>{typedObj.productName}</h3>
                <h4>{`Purcashed: ${typedObj.purchasedDate
                  .split("T")[0]
                  .toString()}`}</h4>
              </div>
            </div>
            <div className="itemDiv__div2">
              <div id="sold-price" className="itemDiv__div2--price">
                <h3>{`X ${typedObj.pieces}`}</h3>
                <h3>{`${typedObj.price}KM`}</h3>
              </div>
              <div id="sold" className="itemDiv__div2--shipping">
                <div className="sold-div">
                  <h4>Shipping:</h4>
                  <div className="sold-div-2">
                    <h4
                      onClick={(evt) =>
                        updateShipping(evt, typedObj._id, "home", i)
                      }
                      className={`${
                        typedObj.shipping === "home" && typedObj.shipping
                      }`}
                    >
                      Home
                    </h4>
                    <h4
                      onClick={(evt) =>
                        updateShipping(evt, typedObj._id, "sent", i)
                      }
                      className={`${
                        typedObj.shipping === "sent" && typedObj.shipping
                      }`}
                    >
                      Sent
                    </h4>
                    <h4
                      onClick={(evt) =>
                        updateShipping(evt, typedObj._id, "traveling", i)
                      }
                      className={`${
                        typedObj.shipping === "traveling" && typedObj.shipping
                      }`}
                    >
                      Traveling
                    </h4>
                    <h4
                      onClick={(evt) =>
                        updateShipping(evt, typedObj._id, "arrived", i)
                      }
                      className={`${
                        typedObj.shipping === "arrived" && typedObj.shipping
                      }`}
                    >
                      Arrived
                    </h4>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );
      }
    }
  );

  return (
    <div className="Basket">
      <nav className="Basket__nav">
        <i className="Basket__nav--logo fab fa-shopware"></i>
        <h3>Shop with us</h3>
        <div className="Basket__nav--icons">
          <i
            onClick={() => {
              setToggleShowBasket(false);
            }}
            className="fas fa-times"
          ></i>
        </div>
      </nav>
      <>
        <div className="Basket__header">
          <div className="Basket__header--div">
            <h3
              onClick={() => {
                setBuySell("buy");
                setRerender(!rerender);
                setRerender2(!rerender2);
              }}
            >
              Items to Buy
            </h3>
            <h3
              onClick={() => {
                setBuySell("sell");
                setRerender2(!rerender2);
              }}
            >
              Items to Sell
            </h3>
          </div>
        </div>
        <div className="Basket__body">
          <div className="Basket__body--readyToBuy">
            <div className="Basket__body--readyToBuy-items">
              {buySell === "buy"
                ? renderCustomerBasketToBuy
                : renderSellerBasketToSell}
            </div>
          </div>
          <div className="Basket__body--purchased">
            <div className="Basket__body--purchased-items">
              {buySell == "buy"
                ? renderBoughtItemsFromBackend
                : renderSoldItemsFromBackend}
              <hr />
            </div>
          </div>
        </div>
        <div className="Basket__footer">
          {/* <div>
            <h3>Total:</h3>
            <h3>120KM</h3>
          </div>
          <button>Buy All</button> */}
        </div>
      </>
    </div>
  );
};

export default Basket;
import React from "react";
interface CardProp {
  brand: string;
  description: string;
  price: number;
  ShopName: string;
  productName: string;
  category: string;
  imgSrc: string;
  sellerId?: string;
  setSellerDetail?: React.Dispatch<
    React.SetStateAction<{ show: boolean; sellerId: string }>
  >;
}
const Card: React.FC<CardProp> = ({
  brand,
  price,
  ShopName,
  productName,
  category,
  imgSrc,
  setSellerDetail,
  sellerId,
}: CardProp) => {
  const handleClick = (evt: React.MouseEvent<HTMLHeadingElement>) => {
    evt.stopPropagation();
    evt.nativeEvent.stopImmediatePropagation();
    let idHolder: string;
    if (sellerId) idHolder = sellerId;
    setSellerDetail &&
      setSellerDetail(
        ({ show, sellerId }: { show: boolean; sellerId: string }) => {
          return { sellerId: idHolder, show: true };
        }
      );
  };

  return (
    <div className="Card">
      <img className="Card__img" src={imgSrc[0]} alt={category} />
      <div className="Card__heading">
        <h4 className="Card__heading--secondary p__tag">{productName}</h4>
        <p className="p__tag">{brand}</p>
        <p className="p__tag">{price} $</p>
        <h4 onClick={handleClick} className="Card__heading--secondary h4__tag">
          {ShopName}
        </h4>
      </div>
    </div>
  );
};

export default Card;
import axios from "axios";
import React, { useContext, useEffect, useState } from "react";
import { intitialDataSetDetailedCard } from "../api/api";
import { ProductContext } from "../context/ProductContext";
import { ProfileDetailContext } from "../context/MainContext";
interface CardDetailInterface {
  sellOrRent: string;
  sellOrDemand: string;
  productName: string;
  category: string;
  year: number;
  locationName: string;
  price: number;
  holds: number;
  sold: number;
  brand: string;
  make: string;
  model: string;
  imgSrc: string[];
  used: boolean;
  desc: string;
}

const CardDetails: React.FC = () => {
  const {
    detailCard,
    closeWindow,
    thisSellerIsLoggedIn,
    setHideChat,
    loggedSellerInfo,
    setCustomerBasketToBuy,
  } = useContext(ProfileDetailContext);
  const [mainImg, setMainImg] = useState(0);
  const [ad, setAd] = useState<CardDetailInterface>();
  const [itsMe, setItsMe] = useState(false);
  useEffect(() => {
    intitialDataSetDetailedCard(
      setAd,
      detailCard.sellerId,
      detailCard.productId
    );
    setTimeout(async () => {
      // console.log(await thisSellerIsLoggedIn(filteredSellersData[0].sellerId));
      setItsMe(await thisSellerIsLoggedIn(detailCard.sellerId));
      // console.log("došlo");
    }, 0);
  }, [detailCard.sellerId, detailCard.productId]);

  const handleChat = () => {
    setHideChat(false);
  };

  const handleAddToCart = () => {
    // loggedSellerInfo as { sellerName: string; sellerId: string };
    if (ad) {
      setCustomerBasketToBuy(
        (
          oldArr: {
            sellerId: string;
            productId: string;
            pieces: number;
            price: number;
            productName: string;
            imgSrc: string;
          }[]
        ) => {
          return [
            ...oldArr,
            {
              sellerId: detailCard.sellerId,
              productId: detailCard.productId,
              pieces: ad.holds,
              price: ad.price,
              productName: ad.productName,
              imgSrc: ad.imgSrc[0],
            },
          ];
        }
      );
    }
  };
  let renderImages;
  try {
    renderImages = ad?.imgSrc.map((link, i) => {
      return <img onClick={() => setMainImg(i)} key={i} src={link} />;
    });
  } catch (err) {}

  return (
    <div className="CardDetails">
      <div className="CardDetails__images">
        <div className="CardDetails__images--main">
          {renderImages !== undefined && renderImages[mainImg]}
        </div>
        <div className="CardDetails__images--list">{renderImages}</div>
      </div>
      {ad ? (
        <div className="CardDetails__text">
          <div className="CardDetails__text--specs">
            <h3>{detailCard.sellerName}</h3>
            {ad.sellOrDemand === "demand" ? (
              <p>
                I am looking to{" "}
                {` ${ad.sellOrRent === "sell" ? "buy" : "loan"} ${ad.brand} ${
                  ad.productName
                }`}{" "}
              </p>
            ) : (
              <p>
                I am{" "}
                {` ${ad.sellOrRent === "sell" ? "selling" : "renting"} ${
                  ad.brand
                } ${ad.productName}`}{" "}
              </p>
            )}
            <p>Product is: {ad.used ? "New" : "Used"}</p>
            <p>Year: {ad.year} KM</p>
            <p>For: {ad.price} KM</p>
            <p>From: {ad.locationName}</p>
            <p>Category: {ad.category}</p>
            <p>In stock: {ad.holds}</p>
            <p>I have sold: {ad.sold}</p>
            <p>Brand: {ad.brand}</p>
            <p>Make: {ad.make}</p>
            <p>Model: {ad.model}</p>
          </div>
          <p>DETAILED</p>
          <div className="CardDetails__text--desc">
            <p>{ad.desc}</p>
          </div>
          <div className="CardDetails__text--btn">
            {!itsMe && (
              <>
                <button onClick={handleChat} type="button">
                  Chat with us
                </button>
                <button onClick={handleAddToCart} type="button">
                  Add to Cart
                </button>
              </>
            )}
            <button onClick={closeWindow} type="submit">
              Close window
            </button>
          </div>
        </div>
      ) : null}
    </div>
  );
};

export default CardDetails;
import React, { useContext, useEffect, useState } from "react";
import { io } from "socket.io-client";
import { getLoggedUserName } from "../api/api";
import { ProfileDetailContext } from "../context/MainContext";

const Chat: React.FC = () => {
  const socket = io("http://localhost:3001");
  const { hideChat, setHideChat, setRerender, rerender } =
    useContext(ProfileDetailContext);

  const [loggedIn, setLoggedIn] = useState(false);
  const [userId, setUserId] = useState("unLoggedId");
  const [userName, setUserName] = useState("guest");
  const [joined, setJoined] = useState(false);
  const [chatObj, setChatObj] = useState<{ [key: string]: string }>({ "": "" });
  const [chatArrObj, setChatArrObj] = useState<
    {
      message: string;
      name: string;
      time: string;
      chater: string;
    }[]
  >([]);

  const [textAreaInput, setTextAreaInput] = useState("");

  const handleChange = (evt: React.ChangeEvent<HTMLTextAreaElement>) => {
    if (evt.target.value.length !== 0) {
      setTextAreaInput(evt.target.value);
    }
  };

  const pushToChat = (
    arr: [obj: { [key: string]: string }, chater: string]
  ) => {
    let date = new Date();
    // let stringDate = JSON.stringify(date.toDateString());
    let stringTime = JSON.stringify(date.toTimeString())
      .split(" ")[0]
      .split('"')[1];
    let newArrOfObj = chatArrObj;
    newArrOfObj.push({
      name: Object.keys(arr[0])[0],
      message: Object.values(arr[0])[0],
      time: stringTime,
      chater: arr[1],
    });
    setChatArrObj([...newArrOfObj]);
  };

  const renderChat = () => {
    return chatArrObj.map(
      (
        {
          message,
          name,
          time,
          chater,
        }: { message: string; name: string; time: string; chater: string },
        i
      ) => {
        return (
          <div className={`Chat__body--${chater}`} key={i}>
            <nav>
              <p>{name}</p>
              <p>{time}</p>
            </nav>
            <p>{message}</p>
          </div>
        );
      }
    );
  };

  const sendMessage = (evt: React.MouseEvent<HTMLButtonElement>) => {
    evt.preventDefault();
    if (textAreaInput.length !== 0) {
      socket.emit(
        "send-message",
        { message: textAreaInput, name: userName },
        userId
      );
      pushToChat([{ [userName]: textAreaInput }, "first"]);

      // console.log(chatArrObj);
    }
  };

  socket.on(
    "get-message-fromRoom",
    (messageData: { message: string; name: string }) => {
      const textMsgArr = Object.values(chatObj);
      // if (textMsgArr[0] !== textAreaInput) {
      // console.log({ [messageData.name]: messageData.message });
      setChatObj({ [messageData.name]: messageData.message });
      // }
    }
  );

  useEffect(() => {
    const textMsgArr = Object.values(chatObj);
    if (textMsgArr[0] !== textAreaInput) {
      pushToChat([chatObj, "second"]);
    }
    setTextAreaInput("");
  }, [chatObj]);

  useEffect(() => {
    (async function getUserName() {
      let { data } = await getLoggedUserName();
      if (data.name !== undefined) {
        // console.log(data);
        setUserName(data.name);
        setUserId(data.Id);
        setLoggedIn(true);
        socket.emit("join-room", data.Id);
        setJoined(true);
        // window.location.reload();
      } else {
        setLoggedIn(false);

        // window.location.reload();
      }
    })();
    if (chatArrObj.length === 0) {
      pushToChat([
        { ["Admin-message"]: "Please type anything to send message to a user" },
        "second",
      ]);
    }
    if (!joined && !loggedIn) {
      socket.emit("join-room", userId);
      setJoined(true);
    }
  }, [loggedIn]);
  return (
    <div className={`${hideChat ? "Chat-hide" : "Chat"}`}>
      <nav className={`${hideChat ? "Chat-hide__nav" : "Chat__nav"}`}>
        <i
          className={`Chat${
            hideChat ? "-hide" : ""
          }__nav--logo fab fa-shopware`}
        ></i>
        <h3
          onClick={() => {
            setHideChat(!hideChat);
          }}
        >
          Chat with us
        </h3>
        <div className={`Chat${hideChat ? "-hide" : ""}__nav--icons`}>
          {!hideChat ? (
            <i
              onClick={() => {
                setHideChat(!hideChat);
              }}
              className="fas fa-chevron-down"
            ></i>
          ) : (
            <i
              onClick={() => {
                setHideChat(!hideChat);
              }}
              className="fas fa-chevron-up"
            ></i>
          )}
          <i className="fas fa-times"></i>
        </div>
      </nav>
      {!hideChat && (
        <>
          <div className="Chat__header">
            <div className="Chat__header--chater">
              <h3>{userName}</h3>
              <p>I am here to help you</p>
            </div>
          </div>
          <div className="Chat__body">{renderChat()}</div>
          <div className="Chat__footer">
            <textarea
              onChange={handleChange}
              placeholder="type your message"
              value={textAreaInput}
            ></textarea>
            <button onSubmit={sendMessage} onClick={sendMessage}>
              Send
            </button>
          </div>
        </>
      )}
    </div>
  );
};

export default React.memo(Chat);

/* const [firstChater, setFirstChater] = useState<{}[]>([
  { admin: "Hi how can i help you, ask me anything" },
  { admin: "don't wory, you just need to folow these instructions" },
]);
const [secondChater, setSecondChater] = useState<{}[]>([
  { TrusT: "I need to ad some products into my shop" },
  { TrusT: "I tried to ad but stuck into implementation" },
]); */

/*   const switchInput = () => {
    let firstLength = Math.floor(Math.random() * firstChater.length);
    let secondLength = Math.floor(Math.random() * secondChater.length);
    let randomChoise = [
      [firstChater[firstLength], "first"],
      [secondChater[secondLength], "second"],
    ][Math.floor(Math.random() * 2)];
    return randomChoise as [obj: { [key: string]: string }, chater: string];
  }; */
import React, { useContext, useEffect, useRef, useState } from "react";
import {
  deleteProduct,
  intitialDataSetDetailedCard,
  updateProduct,
} from "../api/api";
import { ProfileDetailContext } from "../context/MainContext";
interface EditProductInterface {
  sellOrRent: string;
  sellOrDemand: string;
  productName: string;
  category: string;
  year: number;
  locationName: string;
  price: number;
  holds: number;
  sold: number;
  brand: string;
  make: string;
  model: string;
  imgSrc: string[];
  used: boolean;
  desc: string;
}
const EditProduct: React.FC = () => {
  const { editProduct, closeWindow, setEditProduct, rerender, setRerender } =
    useContext(ProfileDetailContext);
  const [ad, setAd] = useState<EditProductInterface>();
  const [mainImg, setMainImg] = useState(0);
  const [imageArr, setImageArr] = useState<string[]>([]);
  const [showAddImage, setShowAddImage] = useState(false);
  const [imgLinkInput, setImgLinkInput] = useState<string>("");
  const formRef = useRef() as React.MutableRefObject<HTMLFormElement>;

  useEffect(() => {
    intitialDataSetDetailedCard(
      setAd,
      editProduct.sellerId,
      editProduct.productId
    );
  }, [editProduct.sellerId, editProduct.productId]);
  useEffect(() => {
    if (ad !== undefined) {
      setImageArr(ad.imgSrc);
    }
  }, [ad]);

  const citiesRef = useRef<string[]>([
    "Sarajevo",
    "Čajniče",
    "Čapljina",
    "Čelinac",
    "Čelić",
    "Čitluk",
    "Banja Luka",
    "Banovići",
    "Berkovići",
    "Bihać",
    "Bijeljina",
    "Bileća",
    "Bosanska Krupa",
    "Bosanski Petrovac",
    "Bosansko Grahovo",
    "Bratunac",
    "Breza",
    "Brod",
    "Brčko",
    "Bugojno",
    "Busovača",
    "Bužim",
    "Cazin",
    "Derventa",
    "Doboj",
    "Dobratići",
    "Domaljevac",
    "Donji Dubovik",
    "Donji Vakuf",
    "Donji Žabar",
    "Drinić",
    "Drvar",
    "Fojnica",
    "Foča",
    "Gacko",
    "Glamoč",
    "Goražde",
    "Gornji Ribnik",
    "Gornji Vakuf",
    "Gradačac",
    "Gradiška",
    "Gračanica",
    "Grude",
    "Hadžići",
    "Han Pijesak",
    "Hreša",
    "Ilidža",
    "Ilijaš",
    "Jablanica",
    "Jajce",
    "Jezero",
    "Kakanj",
    "Kalesija",
    "Kalinovik",
    "Kiseljak",
    "Kladanj",
    "Ključ",
    "Klokotnica",
    "Kneževo",
    "Konjic",
    "Kopači",
    "Kostajnica",
    "Kotor Varoš",
    "Kozarska Dubica",
    "Kreševo",
    "Kupres",
    "Laktaši",
    "Livno",
    "Ljubinje",
    "Ljubuški",
    "Lopare",
    "Lukavac",
    "Lukavica",
    "Maglaj",
    "Matuzići",
    "Milići",
    "Modriča",
    "Mostar",
    "Mrkonjić Grad",
    "Neum",
    "Nevesinje",
    "Novi Grad",
    "Novi Travnik",
    "Novo Selo",
    "Odžak",
    "Olovo",
    "Omanjska",
    "Orašje",
    "Osmaci",
    "Oštra Luka",
    "Pale",
    "Pelagićevo",
    "Petrovo",
    "Posušje",
    "Potoci",
    "Prača",
    "Prijedor",
    "Prnjavor",
    "Prozor",
    "Ravno",
    "Rogatica",
    "Rudo",
    "Sanski Most",
    "Sapna",
    "Sarajevo",
    "Sokolac",
    "Srbac",
    "Srebrenica",
    "Srebrenik",
    "Stanari",
    "Stolac",
    "Šamac",
    "Šekovići",
    "Šipovo",
    "Široki Brijeg",
    "Teočak",
    "Teslić",
    "Tešanj",
    "Tomislavgrad",
    "Travnik",
    "Trebinje",
    "Trnovo",
    "Tuzla",
    "Ugljevik",
    "Vareš",
    "Velika Kladuša",
    "Visoko",
    "Vitez",
    "Višegrad",
    "Vlasenica",
    "Vogošća",
    "Vukosavlje",
    "Zavidovići",
    "Zenica",
    "Zvornik",
    "Žepče",
    "Živinice",
  ]);
  const citiesEnums = citiesRef.current.map((oneOption, i) => {
    return (
      <option key={i} value={oneOption}>
        {oneOption}
      </option>
    );
  });

  const categoryRef = useRef<string[]>([
    "",
    "fruit",
    "vegetable",
    "dairy",
    "meat",
    "vehicle",
    "console",
    "game",
    "house",
    "apartment",
    "smartphone",
    "pc",
    "work",
    "category",
    "pool",
    "tools",
    "forHouse",
  ]);
  const categoryEnums = categoryRef.current.map((oneOption, i) => {
    return (
      <option key={i} value={oneOption}>
        {oneOption}
      </option>
    );
  });

  const handleUpdate = async (evt: React.MouseEvent<HTMLButtonElement>) => {
    evt.preventDefault();
    let sellOrRent = formRef.current.sellOrRent.value;
    let sellOrDemand = formRef.current.sellOrDemand.value;
    let used: boolean = false;
    if (formRef.current.adUsed.value === "used") {
      used = true;
    }
    let year = parseInt(formRef.current.year.value);
    let locationName = formRef.current.locationName.value;
    let category = formRef.current.category.value;
    let holds = parseInt(formRef.current.holds.value);
    let price = parseInt(formRef.current.price.value);
    let brand = formRef.current.brand.value;
    let make = formRef.current.make.value;
    let model = formRef.current.model.value;
    let desc = formRef.current.desc.value;

    let updateObj = {
      sellOrRent,
      sellOrDemand,
      used,
      year,
      locationName,
      category,
      holds,
      brand,
      price,
      make,
      model,
      desc,
      productId: editProduct.productId,
      sellerId: editProduct.sellerId,
      imgSrc: imageArr,
    };
    console.log(updateObj);
    try {
      updateProduct(updateObj);
      setRerender(!rerender);
      setEditProduct({ ...editProduct, show: false });
    } catch (err) {
      console.log(rerender);
      console.log("can't update product");
    }
  };

  const handleAddImage = () => {
    if (imgLinkInput !== "") {
      let newArr = [...imageArr, imgLinkInput];
      setImageArr(newArr);
    }
  };

  const handleDeleteImg = (
    evt: React.MouseEvent<HTMLElement> & { target: { accessKey: string } }
  ) => {
    let newArr = imageArr
      .slice(0, parseInt(evt.target.accessKey))
      .concat(imageArr.slice(parseInt(evt.target.accessKey) + 1));
    if (newArr.length === 0) {
      newArr = [
        "https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Antu_insert-image.svg/1200px-Antu_insert-image.svg.png",
      ];
    }
    setImageArr(newArr);
  };

  const handleDeletion = (evt: React.MouseEvent<HTMLButtonElement>) => {
    evt.preventDefault();
    const obj = {
      sellerId: editProduct.sellerId,
      productId: editProduct.productId,
    };
    // let newAllSellers = allSellers.filter((object: { productId: string }) => {
    //   return object.productId !== obj.productId;
    // });
    // let newMySellers = mySellers.filter((object: { productId: string }) => {
    //   return object.productId !== obj.productId;
    // });
    // console.log(obj, newAllSellers, newMySellers);
    try {
      deleteProduct(obj);
      setRerender(!rerender);
      // setAllSellers(newAllSellers);
      // setMySellers(newMySellers);
      setEditProduct({ ...editProduct, show: false });
    } catch (err) {
      console.log("can't delete product");
    }
  };

  const renderImages = () => {
    let renderImages;
    renderImages = imageArr.map((link, i) => {
      return (
        <div key={i}>
          <i
            accessKey={`${i}`}
            onClick={handleDeleteImg}
            className="far fa-times-circle"
          ></i>
          <img onClick={() => setMainImg(i)} key={i} src={link} />
        </div>
      );
    });
    return renderImages;
  };

  return (
    <form ref={formRef} className="EditProducts">
      <div className="EditProducts__images">
        <div className="EditProducts__images--main">
          {renderImages()[mainImg]}
        </div>
        <div className="EditProducts__images--list">
          <div className="fixDiv">
            <div className="addImage">
              <img
                onClick={() => {
                  setShowAddImage(!showAddImage);
                }}
                className="addImage__img"
                src={
                  "https://cdn1.iconfinder.com/data/icons/rounded-black-basic-ui/139/Photo_Add-RoundedBlack-512.png"
                }
              />
            </div>
            {renderImages()}
          </div>
          {showAddImage && (
            <div className="insertion">
              <input
                onChange={(evt) => {
                  setImgLinkInput(evt.target.value);
                }}
                value={imgLinkInput}
                className="insertion--input"
                type="text"
                placeholder="Type link here ..."
              />
              <i
                onClick={handleAddImage}
                className="insertion--icon  fas fa-plus-circle"
              ></i>
            </div>
          )}
        </div>
      </div>
      {ad ? (
        <div className="EditProducts__text">
          <div className="EditProducts__text--specs">
            <h3>{editProduct.sellerName}</h3>
            <p className="EditProducts__text--specs-p">
              Sell or Rent:
              {ad.sellOrRent === "sell" ? (
                <select name="sellOrRent" defaultValue={"sell"}>
                  <option value="sell">Sell</option>
                  <option value="rent">Rent</option>
                </select>
              ) : (
                <select name="sellOrRent" defaultValue={"rent"}>
                  <option value="sell">Sell</option>
                  <option value="rent">Rent</option>
                </select>
              )}
            </p>
            <p className="EditProducts__text--specs-p">
              Sell or Demand
              {ad.sellOrDemand === "sell" ? (
                <select name="sellOrDemand" defaultValue={"sell"}>
                  <option value="sell">Sell</option>
                  <option value="demand">Demand</option>
                </select>
              ) : (
                <select name="sellOrDemand" defaultValue={"demand"}>
                  <option value="sell">Sell</option>
                  <option value="demand">Demand</option>
                </select>
              )}
            </p>
            {ad.used ? (
              <>
                <p className="EditProducts__text--specs-p">
                  Product is:
                  <select name="adUsed" defaultValue={"used"}>
                    <option value="new">New</option>
                    <option value="used"> Used </option>
                  </select>
                </p>
              </>
            ) : (
              <>
                <p className="EditProducts__text--specs-p">
                  Product is:
                  <select name="adUsed" defaultValue={"new"}>
                    <option value="new">New</option>
                    <option value="used"> Used </option>
                  </select>
                </p>
              </>
            )}

            <p className="EditProducts__text--specs-p">
              Year:
              <input name="year" type="number" defaultValue={ad.year} />
            </p>
            <p className="EditProducts__text--specs-p">
              For: <input name="price" type="number" defaultValue={ad.price} />
              <span>KM</span>
            </p>
            <p className="EditProducts__text--specs-p">
              From:
              <select name="locationName" defaultValue={ad.locationName}>
                {citiesEnums}
              </select>
            </p>
            <p className="EditProducts__text--specs-p">
              Category:
              <select name="category" defaultValue={ad.category}>
                {categoryEnums}
              </select>
            </p>
            <p className="EditProducts__text--specs-p">
              In stock:
              <input name="holds" type="number" defaultValue={ad.holds} />
            </p>
            <p className="EditProducts__text--specs-p">
              Brand:
              <input name="brand" type="text" defaultValue={ad.brand} />
            </p>
            <p className="EditProducts__text--specs-p">
              Make:
              <input name="make" type="text" defaultValue={ad.make} />
            </p>
            <p className="EditProducts__text--specs-p">
              Model:
              <input name="model" type="text" defaultValue={ad.model} />
            </p>
          </div>
          <p>DETAILED</p>

          <textarea
            name="desc"
            defaultValue={ad.desc}
            className="EditProducts__text--desc"
          ></textarea>

          <div className="EditProducts__text--btn">
            <button onClick={handleUpdate} type="submit">
              Save
            </button>
            <button onClick={closeWindow} type="button">
              Close window
            </button>
            <button onClick={handleDeletion} type="submit">
              Delete
            </button>
          </div>
        </div>
      ) : null}
    </form>
  );
};

export default EditProduct;
import React, { SetStateAction, useContext, useState } from "react";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import MyProfile from "./MyProfile";
import { ProfileDetailContext } from "../context/MainContext";
import { logIn, logOut } from "../api/api";
export interface LoginProps {
  setToggleShowLogin: React.Dispatch<SetStateAction<boolean>>;
  toggleShowLogin: boolean;
  setToggleShowRegister: React.Dispatch<SetStateAction<boolean>>;
  toggleShowRegister: boolean;
  closeAllComponents: (message?: string) => void;
  loggedIn: boolean;
  // setLoggedIn: React.Dispatch<React.SetStateAction<boolean>>;
}
const Login: React.FC<LoginProps> = ({
  setToggleShowRegister,
  toggleShowRegister,
  setToggleShowLogin,
  toggleShowLogin,
  closeAllComponents,
  loggedIn,
}: LoginProps) => {
  const { profileDetail } = useContext(ProfileDetailContext);
  const [userName, setUserName] = useState("");
  const [password, setPassword] = useState("");
  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {
    eval(`set${evt.target.name}`)(evt.target.value);
  };

  const handleLogIn = () => {
    try {
      logIn(userName, password);
      closeAllComponents("welcome");
    } catch (err) {
      toast.error("Not allowed: insert username and password!");
    }
  };
  const handleLogOut = async (evt: React.MouseEvent<HTMLButtonElement>) => {
    try {
      logOut();
      closeAllComponents("bye");
    } catch (err) {
      toast.error("Can not logout user");
    }
  };
  return (
    <div>
      <form
        onSubmit={(evt) => {
          evt.preventDefault();
        }}
      >
        {!loggedIn ? (
          <div className="Login">
            <h2 className="h2__tag">Login</h2>
            <div className="Login__container">
              <input
                onChange={handleChange}
                className="Login__container--round fontAwesome"
                type="text"
                placeholder="&#xf2bd; Username"
                value={userName}
                name="UserName"
              />
              <input
                onChange={handleChange}
                className="Login__container--round fontAwesome"
                type="password"
                placeholder="&#xf059; Password"
                value={password}
                name="Password"
              />
            </div>
            <button onClick={handleLogIn} className="Login__btn">
              Login
            </button>
            <a
              onClick={() => {
                setToggleShowLogin(!toggleShowLogin);
                setToggleShowRegister(!toggleShowRegister);
              }}
            >
              Register instead?
            </a>
          </div>
        ) : (
          <div className="logout">
            {profileDetail.show && (
              <MyProfile
                closeAllComponents={closeAllComponents}
                handleLogOut={handleLogOut}
              />
            )}
          </div>
        )}
      </form>
    </div>
  );
};

export default Login;
import React, { useContext, useEffect, useState } from "react";
import { ProfileDetailContext } from "../context/MainContext";

import SellerDetailProducts from "./SellerDetailProducts";

const MyProfile: React.FC<{
  handleLogOut: (evt: React.MouseEvent<HTMLButtonElement>) => void;
  closeAllComponents: (message?: string) => void;
}> = ({ handleLogOut, closeAllComponents }) => {
  const { loggedSellerInfo, profileDetail, setProfileDetail } =
    useContext(ProfileDetailContext);
  const [currentSeller, setCurrentSeller] = useState<any[]>();
  const [soldAndHold, setSoldAndHold] =
    useState<{ sold: number; hold: number }>();
  const [fromMyProfile, setFromMyProfile] = useState(true);

  const handleClick = async (evt: React.MouseEvent<HTMLButtonElement>) => {
    console.log(loggedSellerInfo && loggedSellerInfo.sellerId);
    closeAllComponents();
    setProfileDetail(
      (oldVal: {
        show: boolean;
        sellerId: string;
      }): { show: boolean; sellerId: string } => {
        return { ...oldVal, show: false };
      }
    );
  };
  let renderStars = () => {
    if (loggedSellerInfo) {
      let value = loggedSellerInfo.rating;
      const stars = [1, 2, 3, 4, 5].map((val, i) => {
        let newVal = Math.floor(value);
        if (i < newVal) {
          return <i key={i} className="fas fa-star"></i>;
        } else if (Math.floor(value) < value) {
          value = Math.floor(value);
          return <i key={i} className="fas fa-star-half-alt"></i>;
        } else {
          return <i key={i} className="far fa-star"></i>;
        }
      });
      return stars;
    }
  };
  let renderLikes = () => {
    let likesString = "";
    loggedSellerInfo.likes.forEach((val: { name: string }) => {
      likesString = likesString.concat(` ${val.name},`);
    });
    console.log(likesString);
    return likesString;
  };
  let renderSells = () => {
    let sellsString = "";
    loggedSellerInfo.sells.forEach((val: string) => {
      sellsString = sellsString.concat(` ${val},`);
    });
    console.log(sellsString);
    return sellsString;
  };
  let arrayRotate = (arr: []) => {
    let newArr = [];
    while (arr.length !== 0) {
      newArr.push(arr.pop());
    }
    return newArr;
  };
  return (
    <div className="MyProfile">
      <div className="MyProfile__images">
        <div className="MyProfile__images--main">
          <SellerDetailProducts fromMyProfile={fromMyProfile} />
        </div>
        <div className="MyProfile__images--list"></div>
      </div>

      <div className="MyProfile__text">
        <div className="MyProfile__text--specs">
          {renderStars()}
          <br />

          <br />
          <h3>{loggedSellerInfo && loggedSellerInfo.sellerName}</h3>
          {
            <div>
              <p>
                Profil created:{" "}
                {loggedSellerInfo &&
                  arrayRotate(loggedSellerInfo.date.split("-")).join(" ")}
              </p>
              <h4>Likes:</h4>
              {renderLikes()}
              <h4>Sells:</h4>
              {renderSells()}
            </div>
          }
        </div>
        <br />
        <p>About me:</p>
        <div className="MyProfile__text--desc">
          <p>
            Lorem ipsum dolor sit, amet consectetur adipisicing elit. Magni
            omnis eaque quis possimus placeat architecto eum harum expedita
            pariatur numquam? Hic rerum autem nostrum optio sed cum veritatis
            fugit beatae.
          </p>
        </div>
        <br />
        <br />
        <h2 className="h2__tag">LogOut</h2>
        <p className="p__tag">
          Hope you enjoyed using our site, see you later.
        </p>
        <div className=" MyProfile__text--btn">
          <button onClick={handleClick} type="button" className="btnn">
            Close window
          </button>
          <button onClick={handleLogOut} className="btnn">
            Press to logout
          </button>
        </div>
      </div>
    </div>
  );
};

export default MyProfile;
import React, { useState, useEffect, useContext } from "react";
import Card from "./Card";
import CardDetails from "./CardDetails";
import { ProfileDetailContext } from "../context/MainContext";
import EditProduct from "./EditProduct";

interface ListCardsProps {
  mySellers?: {}[] | undefined;
  setMySellers?: React.Dispatch<React.SetStateAction<{}[] | undefined>>;
  loggedIn?: boolean;
}

const MyShop: React.FC<ListCardsProps> = ({
  mySellers,
  setMySellers,
  loggedIn,
}) => {
  const {
    detailCard,
    closeWindow,
    setDetailCard,
    editProduct,
    setEditProduct,
  } = useContext(ProfileDetailContext);
  const [productList, setProductList] = useState<{}[] | null>();

  useEffect(() => {
    setProductList(mySellers);
  }, [mySellers, loggedIn]);

  const renderProductList = productList?.map((obj: any, i) => {
    return (
      <div onClick={() => handleClick(obj)} key={i}>
        <Card
          key={i}
          ShopName={obj.shopName}
          productName={obj.productName}
          brand={obj.brand}
          description={obj.desc}
          price={obj.price}
          category={obj.category}
          imgSrc={obj.imgSrc}
        />
      </div>
    );
  });

  const handleClick = (obj: {
    show: boolean;
    sellerId: string;
    productId: string;
    sellerName: string;
  }) => {
    setEditProduct({
      sellerId: obj.sellerId,
      productId: obj.productId,
      show: true,
      sellerName: obj.sellerName,
    });
  };

  return (
    <div className="MyShop">
      <div className="MyShop__detail">{detailCard.show && <CardDetails />}</div>
      <div className="ListCards__detail">
        {editProduct.show && <EditProduct />}
      </div>
      <div className="MyShop__list">
        {renderProductList}
        {/* {renderProductList}
        {renderProductList} */}
      </div>
    </div>
  );
};

export default MyShop;
import axios from "axios";
import React, { SetStateAction, useEffect, useRef, useState } from "react";
import { toast } from "react-toastify";
interface RegisterProps {
  setToggleShowLogin: React.Dispatch<SetStateAction<boolean>>;
  toggleShowLogin: boolean;
  setToggleShowRegister: React.Dispatch<SetStateAction<boolean>>;
  toggleShowRegister: boolean;
  closeAllComponents: (message: string) => void;
}
const Register: React.FC<RegisterProps> = ({
  setToggleShowLogin,
  toggleShowLogin,
  setToggleShowRegister,
  toggleShowRegister,
  closeAllComponents,
}: RegisterProps) => {
  const [register, setRegister] = useState<{
    username: string;
    email: string;
    password1: string;
    password2: string;
    likes: { name: string; importance: number }[];
    sells: string[];
  }>({
    username: "",
    email: "",
    password1: "",
    password2: "",
    likes: [
      { name: "Smartphone", importance: 3 },
      { name: "Game", importance: 3 },
      { name: "Pc", importance: 3 },
      { name: "Console", importance: 3 },
    ],
    sells: [],
  });
  const [runUseEffect, setRunUseEffect] = useState(false);
  const [runUseEffect2, setRunUseEffect2] = useState(false);
  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {
    setRegister((oldRegister) => {
      return { ...oldRegister, [evt.target.name]: evt.target.value };
    });
  };

  useEffect(() => {
    var map = new Map() as any;
    for (let i = 0; i < register.likes.length; i++) {
      map.set(register.likes[i].name, register.likes[i]);
    }
    let newLikesArr = [...map.values()];

    setRegister((oldRegister) => {
      return { ...oldRegister, likes: newLikesArr };
    });
    console.log(newLikesArr);
  }, [runUseEffect]);

  useEffect(() => {
    var map = new Map() as any;
    for (let i = 0; i < register.sells.length; i++) {
      map.set(register.sells[i], register.sells[i]);
    }
    let newSellsArr = [...map.values()];

    setRegister((oldRegister) => {
      return { ...oldRegister, sells: newSellsArr };
    });
    console.log(newSellsArr);
  }, [runUseEffect2]);

  const handleCategoryChange1 = (evt: React.ChangeEvent<HTMLSelectElement>) => {
    let newLikesArr = register.likes;
    if (newLikesArr.length >= 4) {
      let idx = parseInt(evt.target.name.slice(6)) - 1;
      newLikesArr[idx] = { name: evt.target.value, importance: 10 };
    } else {
      newLikesArr.push({ name: evt.target.value, importance: 10 });
    }
    setRegister((oldRegister) => {
      return { ...oldRegister, likes: newLikesArr };
    });
    setRunUseEffect(!runUseEffect);
  };
  const handleCategoryChange2 = (evt: React.ChangeEvent<HTMLSelectElement>) => {
    let newSellsArr = register.sells;

    if (newSellsArr.length >= 4) {
      let idx = parseInt(evt.target.name.slice(6)) - 1;
      newSellsArr[idx] = evt.target.value;
    } else {
      newSellsArr.push(evt.target.value);
    }

    setRegister((oldRegister) => {
      return { ...oldRegister, sells: newSellsArr };
    });
    setRunUseEffect2(!runUseEffect2);
  };

  const handleSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {
    evt.preventDefault();
    console.log(register);
    try {
      let response = await axios.post(
        "http://localhost:3001/api/seller/register",
        {
          username: register.username,
          email: register.email,
          password: register.password1,
          sells: register.sells,
          likes: register.likes,
        },
        { withCredentials: true }
      );
      closeAllComponents("welcome");
    } catch (err: any) {
      console.log(err);
      toast.error(err.message);
    }
  };

  const categoryRef = useRef<string[]>([
    "Option",
    "fruit",
    "vegetable",
    "dairy",
    "meat",
    "vehicle",
    "console",
    "game",
    "house",
    "apartment",
    "smartphone",
    "pc",
    "work",
    "pool",
    "tools",
    "forHouse",
  ]);
  const categoryEnums = categoryRef.current.map((oneOption, i) => {
    return (
      <option className="options" key={i} value={oneOption}>
        {oneOption}
      </option>
    );
  });

  return (
    <form onSubmit={handleSubmit} className="Register">
      <h2 className="h2__tag">Register</h2>
      <div className="Register__container">
        <input
          onChange={handleChange}
          className="Register__container--round fontAwesome"
          type="text"
          placeholder="&#xf2bd; Username"
          name="username"
          value={register.username}
        />
        <input
          onChange={handleChange}
          className="Register__container--round fontAwesome"
          type="email"
          placeholder="&#xf2bd; Email"
          name="email"
          value={register.email}
        />
        <input
          onChange={handleChange}
          className="Register__container--round fontAwesome"
          type="password"
          placeholder="&#xf059; Password"
          name="password1"
          value={register.password1}
        />
        <input
          onChange={handleChange}
          className="Register__container--round fontAwesome"
          type="password"
          placeholder="&#xf059; Repeat Password"
          name="password2"
          value={register.password2}
        />
        <div className="Register__container--check">
          <div>
            <h3>What you are intested in?</h3>
            <select
              onChange={handleCategoryChange1}
              name="likes-1"
              id="likes-1"
            >
              {categoryEnums}
            </select>
            <select
              onChange={handleCategoryChange1}
              name="likes-2"
              id="likes-2"
            >
              {categoryEnums}
            </select>
            <select
              onChange={handleCategoryChange1}
              name="likes-3"
              id="likes-3"
            >
              {categoryEnums}
            </select>
            <select
              onChange={handleCategoryChange1}
              name="likes-4"
              id="likes-4"
            >
              {categoryEnums}
            </select>
          </div>
          <div>
            <h3>What would you like to sell?</h3>
            <select
              onChange={handleCategoryChange2}
              name="sells-1"
              id="sells-1"
            >
              {categoryEnums}
            </select>
            <select
              onChange={handleCategoryChange2}
              name="sells-2"
              id="sells-2"
            >
              {categoryEnums}
            </select>
            <select
              onChange={handleCategoryChange2}
              name="sells-3"
              id="sells-3"
            >
              {categoryEnums}
            </select>
            <select
              onChange={handleCategoryChange2}
              name="sells-4"
              id="sells-4"
            >
              {categoryEnums}
            </select>
          </div>
        </div>
      </div>
      <button className="Register__btn">Register</button>
      <a
        onClick={() => {
          setToggleShowLogin(!toggleShowLogin);
          setToggleShowRegister(!toggleShowRegister);
        }}
      >
        Already have account?
      </a>
    </form>
  );
};

export default Register;
import React, { useEffect, useRef, useState } from "react";

interface SearchProps {
  allSellers: {}[] | undefined;
  setAllSellers: React.Dispatch<React.SetStateAction<{}[] | undefined>>;
}

const Search: React.FC<SearchProps> = ({ setAllSellers, allSellers }) => {
  const sellersRef = useRef(allSellers);

  useEffect(() => {
    if (sellersRef.current === undefined) sellersRef.current = allSellers;
  }, [allSellers]);
  const [inputState, setInputState] = useState<string>("");

  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>) => {
    evt.preventDefault();
    let filteredSellers = sellersRef.current?.filter((obj: any) => {
      var arr: string[] = Object.keys(obj);
      let thruty = false;
      for (let i = 0; i < arr.length; i++) {
        try {
          if (obj[arr[i]].toLowerCase().includes(inputState.toLowerCase()))
            thruty = true;
        } catch (err) {}
      }
      return thruty;
    });
    setAllSellers(filteredSellers);
    // console.log(allSellers, sellersRef.current);
  };

  return (
    <form onSubmit={handleSubmit} className="Search">
      <input
        onChange={(evt) => {
          setInputState(evt.target.value);
        }}
        value={inputState}
        className="Search__input"
      />
      <button className="Search__btn">Search</button>
    </form>
  );
};

export default Search;
import React, { useContext, useEffect, useState } from "react";
import { ProfileDetailContext } from "../context/MainContext";
import SellerDetailProducts from "./SellerDetailProducts";

const SellerDetail: React.FC = () => {
  const {
    allSellers,
    sellerDetail,
    setSellerDetail,
    setHideChat,
    thisSellerIsLoggedIn,
    createClickedSellerInfo,
    clickedSellerInfo,
  } = useContext(ProfileDetailContext);
  const [currentSeller, setCurrentSeller] = useState<any[]>();
  const [soldAndHold, setSoldAndHold] =
    useState<{ sold: number; hold: number }>();
  const [itsMe, setItsMe] = useState(false);
  useEffect(() => {
    let allSold = 0;
    let allHolds = 0;
    let filteredSellersData = allSellers?.filter((obj: any) => {
      return obj.sellerId === sellerDetail.sellerId;
    });
    setCurrentSeller(filteredSellersData);

    filteredSellersData?.forEach((obj: any) => {
      allSold = allSold + obj.sold;
      allHolds = allHolds + obj.holds;
    });
    setSoldAndHold({ sold: allSold, hold: allHolds });

    setTimeout(async () => {
      // console.log(filteredSellersData);
      setItsMe(await thisSellerIsLoggedIn(filteredSellersData[0].sellerId));
      // console.log(sellerDetail.sellerId);
      createClickedSellerInfo(sellerDetail.sellerId);
    }, 0);
  }, []);

  const handleClick = (evt: React.MouseEvent<HTMLButtonElement>) => {
    console.log(currentSeller && currentSeller[0].sellerId);
    setSellerDetail(
      (oldVal: {
        show: boolean;
        sellerId: string;
      }): { show: boolean; sellerId: string } => {
        return { ...oldVal, show: false };
      }
    );
  };
  const handleChat = () => {
    setHideChat(false);
  };
  let renderStars = () => {
    if (currentSeller) {
      let value = currentSeller[0].rating;
      const stars = [1, 2, 3, 4, 5].map((val, i) => {
        let newVal = Math.floor(value);
        if (i < newVal) {
          return <i key={i} className="fas fa-star"></i>;
        } else if (Math.floor(value) < value) {
          value = Math.floor(value);
          return <i key={i} className="fas fa-star-half-alt"></i>;
        } else {
          return <i key={i} className="far fa-star"></i>;
        }
      });
      return stars;
    }
  };

  let renderSells = () => {
    let sellsString = "";
    clickedSellerInfo?.sells.forEach((val: string) => {
      sellsString = sellsString.concat(` ${val},`);
    });
    // console.log(clickedSellerInfo);
    return sellsString;
  };

  let arrayRotate = (arr: []) => {
    let newArr = [];
    while (arr.length !== 0) {
      newArr.push(arr.pop());
    }
    return newArr;
  };
  return (
    <div className="SellerDetails">
      <div className="SellerDetails__images">
        <div className="SellerDetails__images--main">
          <SellerDetailProducts itsMe={itsMe} currentSeller={currentSeller} />
        </div>
        <div className="SellerDetails__images--list"></div>
      </div>

      <div className="SellerDetails__text">
        <div className="SellerDetails__text--specs">
          {renderStars()}
          <br />

          <br />
          <h3>{currentSeller && currentSeller[0].sellerName}</h3>
          <p>
            Profil created:{" "}
            {currentSeller &&
              arrayRotate(currentSeller[0].date.split("-")).join(" ")}
          </p>
          <h4>Sells:</h4>
          {renderSells()}
        </div>
        <br />
        <br />
        <br />
        <br />
        <br />
        <p>About me:</p>
        <div className="SellerDetails__text--desc">
          <p>
            Lorem ipsum dolor sit, amet consectetur adipisicing elit. Magni
            omnis eaque quis possimus placeat architecto eum harum expedita
            pariatur numquam? Hic rerum autem nostrum optio sed cum veritatis
            fugit beatae.
          </p>
        </div>
        <div className="SellerDetails__text--btn">
          <button onClick={handleClick} type="button">
            Close window
          </button>
          {!itsMe && (
            <button onClick={handleChat} type="button">
              Chat with us
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default SellerDetail;
import React, { useState, useEffect, ReactElement, useContext } from "react";
import { ProfileDetailContext } from "../context/MainContext";
import Card from "./Card";

export interface SellerDetailProps {
  currentSeller?: any[] | undefined;
  itsMe?: boolean;
  fromMyProfile?: boolean;
}

const SellerDetailProducts: React.FC<SellerDetailProps> = ({
  currentSeller,
  itsMe,
  fromMyProfile,
}) => {
  const { setDetailCard, setEditProduct, mySellers } =
    useContext(ProfileDetailContext);
  const [productList, setProductList] = useState<any[] | null>();

  useEffect(() => {
    // console.log({ mySellers: mySellers, currentSeller: currentSeller });
    if (currentSeller) {
      setProductList(currentSeller);
    } else {
      setProductList(mySellers);
    }
  }, [currentSeller]);

  const handleClick = (evt: React.MouseEvent<HTMLDivElement>, key: number) => {
    let funcName = "setEditProduct";
    console.log(itsMe);
    if (!itsMe && !fromMyProfile) {
      funcName = "setDetailCard";
    }
    if (productList) {
      eval(funcName)({
        sellerName: productList[key].sellerName,
        sellerId: productList[key].sellerId,
        productId: productList[key].productId,
        show: true,
      });
      console.log(productList && productList[key]);
    }
  };
  const renderProductList = productList?.map((obj: any, i) => {
    return (
      <div onClick={(evt) => handleClick(evt, i)} key={i}>
        <Card
          key={i}
          ShopName={obj.shopName}
          productName={obj.productName}
          brand={obj.brand}
          description={obj.desc}
          price={obj.price}
          category={obj.category}
          imgSrc={obj.imgSrc}
        />
      </div>
    );
  });

  return (
    <div className="SellerDetailProducts">
      <div className="SellerDetailProducts__list">
        {productList?.length !== 0 ? (
          <>
            {renderProductList}
            {/* {renderProductList}
            {renderProductList} */}
          </>
        ) : (
          <h3>Product list is empty</h3>
        )}
      </div>
    </div>
  );
};

export default SellerDetailProducts;
import React, { useEffect, useRef, useState } from "react";

interface SortFilterProps {
  allSellers: {}[] | undefined;
  mySellers: {}[] | undefined;
  setAllSellers: React.Dispatch<React.SetStateAction<{}[] | undefined>>;
  setMySellers: React.Dispatch<React.SetStateAction<{}[] | undefined>>;
}

const SortFilter: React.FC<SortFilterProps> = ({
  allSellers,
  setAllSellers,
  setMySellers,
  mySellers,
}) => {
  const sellersRef = useRef(allSellers);
  const mySellersRef = useRef(mySellers);
  useEffect(() => {
    if (sellersRef.current === undefined) sellersRef.current = allSellers;
  }, [allSellers]);
  useEffect(() => {
    if (mySellersRef.current === undefined) mySellersRef.current = mySellers;
  }, [mySellers]);

  const handleChange = (evt: React.ChangeEvent<HTMLSelectElement>) => {
    if (evt.target.value === "Category") {
      setAllSellers(sellersRef.current);
      setMySellers(mySellersRef.current);
    } else {
      let categorizedSellers = sellersRef.current?.filter((obj: any) => {
        return obj.category === evt.target.value;
      });
      let categorizedMySellers = mySellersRef.current?.filter((obj: any) => {
        return obj.category === evt.target.value;
      });
      setAllSellers(categorizedSellers);
      setMySellers(categorizedMySellers);
    }
  };

  const categoryRef = useRef<string[]>([
    "Category",
    "fruit",
    "vegetable",
    "dairy",
    "meat",
    "vehicle",
    "console",
    "game",
    "house",
    "apartment",
    "smartphone",
    "pc",
    "work",
    "category",
    "pool",
    "tools",
    "forHouse",
  ]);
  const categoryEnums = categoryRef.current.map((oneOption, i) => {
    return (
      <option className="options" key={i} value={oneOption}>
        {oneOption}
      </option>
    );
  });

  return (
    <div className="SortFilter">
      <div className="SortFilter__Category">
        <select onChange={handleChange} required name="category">
          {categoryEnums}
        </select>
        <i className="fas fa-level-down-alt SortFilter__Category--icon"></i>
      </div>
    </div>
  );
};

export default SortFilter;
import React from "react";
import Chat from "../components/Chat";

const Footer = () => {
  return (
    <div className="Footer">
      <Chat />
    </div>
  );
};

export default Footer;
import React, { useEffect, useState } from "react";
import { useDeepCompareEffectNoCheck } from "use-deep-compare-effect";
import Footer from "./Footer";
import ListCards from "./ListCards";
import Navbar from "./Navbar";
import { getLoggedUserName, getSellers } from "../api/api";
import { Route, Routes, BrowserRouter, Navigate } from "react-router-dom";
import Product from "./Product";
import Category from "../components/Product-routes/Category";
import BasicInformation from "../components/Product-routes/BasicInformation";
import PriceImageDesc from "../components/Product-routes/PriceImageDesc";
import Publish from "../components/Product-routes/Publish";
import { ProductProvider } from "../context/ProductContext";
import MyShop from "../components/MyShop";

import { ProfileDetailProvider } from "../context/MainContext";
const Landing: React.FC = () => {
  const [allSellers, setAllSellers] = useState<{}[] | undefined>(undefined);
  const [mySellers, setMySellers] = useState<any[] | undefined>(undefined);
  const [loggedIn, setLoggedIn] = useState(false);
  const [sellerId, setSellerId] = useState("");
  const [rerender, setRerender] = useState(false);
  // useEffect(() => {
  // }, [loggedIn]);
  useDeepCompareEffectNoCheck(() => {
    let getAllApis = async () => {
      let response1 = await getSellers();
      setAllSellers(response1);
      // console.log(response1);
      var response2 = await getLoggedUserName();
      let mySellersData = allSellers?.filter((obj: any) => {
        return obj.sellerId === response2.data.sellerId;
      });
      setMySellers(mySellersData);
      // console.log(response2.data);
      setSellerId(response2.data.sellerId);
      if (response2.data.data === false) setLoggedIn(false);
      else setLoggedIn(true);
    };
    getAllApis();
  }, [rerender, loggedIn]);
  return (
    <ProfileDetailProvider
      sellerId={sellerId}
      allSellers={allSellers}
      setAllSellers={setAllSellers}
      mySellers={mySellers}
      setMySellers={setMySellers}
      loggedIn={loggedIn}
      setLoggedIn={setLoggedIn}
      rerender={rerender}
      setRerender={setRerender}
    >
      <div className="Landing">
        <BrowserRouter>
          <Navbar
            mySellers={mySellers}
            setMySellers={setMySellers}
            loggedIn={loggedIn}
            setLoggedIn={setLoggedIn}
            allSellers={allSellers}
            setAllSellers={setAllSellers}
          />

          <div className="Landing__ContentBody">
            <Routes>
              <Route
                path="/addProduct/"
                element={
                  <ProductProvider>
                    <Product />
                  </ProductProvider>
                }
              >
                <Route path="/addProduct/category" element={<Category />} />
                <Route
                  path="/addProduct/basic-information"
                  element={<BasicInformation />}
                />
                <Route
                  path="/addProduct/price-image-desc"
                  element={<PriceImageDesc />}
                />
                <Route path="/addProduct/publish" element={<Publish />} />
              </Route>

              <Route
                path="/"
                element={
                  <ProductProvider>
                    <ListCards
                      setAllSellers={setAllSellers}
                      allSellers={allSellers}
                    />
                  </ProductProvider>
                }
              />
              {
                <Route
                  path="/myArticles"
                  element={
                    <ProductProvider>
                      <MyShop
                        loggedIn={loggedIn}
                        setMySellers={setMySellers}
                        mySellers={mySellers}
                      />
                    </ProductProvider>
                  }
                />
              }
              <Route path="/*" element={<Navigate to={"/"} />} />
            </Routes>
          </div>
          <Footer />
        </BrowserRouter>
      </div>
    </ProfileDetailProvider>
  );
};

export default Landing;
import axios from "axios";
import React, { useState, useEffect, useContext } from "react";
import Card from "../components/Card";
import EditProduct from "../components/EditProduct";
import SellerDetail from "../components/SellerDetail";
import { ProfileDetailContext } from "../context/MainContext";
import CardDetails from "../components/CardDetails";

interface ListCardsProps {
  allSellers: {}[] | undefined;
  setAllSellers: React.Dispatch<React.SetStateAction<{}[] | undefined>>;
}

const ListCards: React.FC<ListCardsProps> = ({ allSellers, setAllSellers }) => {
  const {
    sellerDetail,
    setSellerDetail,
    detailCard,
    setDetailCard,
    editProduct,
    loggedSellerInfo,
    setEditProduct,
    closeWindow,
  } = useContext(ProfileDetailContext);
  const [productList, setProductList] = useState<{}[] | null>();

  useEffect(() => {
    setProductList(allSellers);
    // console.log(allSellers);
  }, [allSellers]);

  const renderProductList = productList?.map((obj: any, i) => {
    return (
      <div onClick={() => handleClick(obj)} key={i}>
        <Card
          sellerId={obj.sellerId}
          setSellerDetail={setSellerDetail}
          key={i}
          ShopName={obj.sellerName}
          productName={obj.productName}
          brand={obj.brand}
          description={obj.desc}
          price={obj.price}
          category={obj.category}
          imgSrc={obj.imgSrc}
        />
      </div>
    );
  });

  const handleClick = (obj: {
    sellerName: string;
    show: boolean;
    sellerId: string;
    productId: string;
  }) => {
    if (obj.sellerId === loggedSellerInfo.sellerId) {
      setEditProduct({
        sellerName: obj.sellerName,
        sellerId: obj.sellerId,
        productId: obj.productId,
        show: true,
      });
    } else {
      setDetailCard({
        sellerName: obj.sellerName,
        sellerId: obj.sellerId,
        productId: obj.productId,
        show: true,
      });
    }
  };

  return (
    <div className="ListCards">
      <div className="ListCards__detail">
        {detailCard.show && <CardDetails />}
      </div>
      <div className="ListCards__detail">
        {sellerDetail.show && <SellerDetail />}
      </div>
      <div className="ListCards__detail">
        {editProduct.show && <EditProduct />}
      </div>
      <div className="ListCards__list">
        {renderProductList}
        {/* {renderProductList}
        {renderProductList}
        {renderProductList}
        {renderProductList}
        {renderProductList} */}
      </div>
    </div>
  );
};

export default ListCards;
import React, { useContext, useState } from "react";
import Login from "../components/Login";
import Register from "../components/Register";
import { Link, useNavigate } from "react-router-dom";
import Search from "../components/Search";
import { ToastContainer, Bounce, toast } from "react-toastify";
import SortFilter from "../components/SortFilter";
import { ProfileDetailContext } from "../context/MainContext";
import Basket from "../components/Basket";

interface NavbarProps {
  allSellers: {}[] | undefined;
  mySellers: {}[] | undefined;
  setAllSellers: React.Dispatch<React.SetStateAction<{}[] | undefined>>;
  setMySellers: React.Dispatch<React.SetStateAction<{}[] | undefined>>;
  loggedIn: boolean;
  setLoggedIn: React.Dispatch<React.SetStateAction<boolean>>;
}

const Navbar: React.FC<NavbarProps> = ({
  loggedIn,
  setLoggedIn,
  setMySellers,
  mySellers,
}) => {
  const {
    allSellers,
    setAllSellers,
    profileDetail,
    setProfileDetail,
    setDetailCard,
    closeWindow,
    setRerender,
    rerender,
  } = useContext(ProfileDetailContext);
  const navigate = useNavigate();
  const [toggleShowBasket, setToggleShowBasket] = useState(false);
  const [toggleShowLogin, setToggleShowLogin] = useState(false);
  const [toggleShowRegister, setToggleShowRegister] = useState(false);
  const closeAllComponents = async (message = "") => {
    if (message !== "") {
      toast.success(message);
      await setTimeout(() => {
        setToggleShowLogin(false);
        setToggleShowRegister(false);
        setLoggedIn(!loggedIn);
        setRerender(!rerender);
        navigate("/");
        window.location.reload();
      }, 1200);
    } else {
      await setTimeout(() => {
        setToggleShowLogin(false);
        setToggleShowRegister(false);
        // setRerender(!rerender);
        // window.location.reload();
        // navigate("/");
      }, 500);
    }

    // console.log(message);
  };

  const handleLogInData = () => {
    // console.log(profileDetail);
    setProfileDetail(
      ({ show, sellerId }: { show: boolean; sellerId: string }) => {
        return { sellerId: profileDetail.sellerId, show: true };
      }
    );
  };
  return (
    <div className="Navbar">
      <div className="Navbar__primary">
        <i className="Navbar__primary--logo fab fa-shopware"></i>
        <div className="Navbar__primary--div">
          <ToastContainer
            draggable={true}
            autoClose={1200}
            transition={Bounce}
          />
          <Search allSellers={allSellers} setAllSellers={setAllSellers} />
          <i className="fas fa-clipboard-check"></i>
          <i
            onClick={() => {
              setToggleShowBasket(!toggleShowBasket);
            }}
            className="fas fa-shopping-cart"
          ></i>
          <i
            onClick={() => {
              handleLogInData();
              toggleShowRegister
                ? setToggleShowRegister(!toggleShowRegister)
                : setToggleShowLogin(!toggleShowLogin);
            }}
            className="fas fa-user-tie"
          ></i>
          {toggleShowBasket && (
            <Basket
              toggleShowBasket={toggleShowBasket}
              setToggleShowBasket={setToggleShowBasket}
            />
          )}
          {toggleShowLogin && (
            <Login
              loggedIn={loggedIn}
              closeAllComponents={closeAllComponents}
              setToggleShowLogin={setToggleShowLogin}
              toggleShowLogin={toggleShowLogin}
              setToggleShowRegister={setToggleShowRegister}
              toggleShowRegister={toggleShowRegister}
            />
          )}
          {toggleShowRegister && (
            <Register
              closeAllComponents={closeAllComponents}
              setToggleShowLogin={setToggleShowLogin}
              toggleShowLogin={toggleShowLogin}
              setToggleShowRegister={setToggleShowRegister}
              toggleShowRegister={toggleShowRegister}
            />
          )}
        </div>
      </div>
      <div className="Navbar__secondary">
        {loggedIn ? (
          <Link
            to={"/addProduct/category"}
            className="Navbar__secondary--tag a-tag add-product"
          >
            Add new product
          </Link>
        ) : (
          <a
            onClick={() => setToggleShowLogin(true)}
            className="Navbar__secondary--tag a-tag add-product"
          >
            Add new product
          </a>
        )}

        {/* <div className="Navbar__secondary--middleDiv"> */}
        <Link to={"/"} className="Navbar__secondary--tag a-tag">
          Home
        </Link>

        <Link to={"/popular"} className="Navbar__secondary--tag a-tag">
          Popular
        </Link>
        <Link to={"/suggested"} className="Navbar__secondary--tag a-tag">
          Suggested
        </Link>
        {/* </div> */}
        {loggedIn && (
          <Link to={"/myArticles"} className="Navbar__secondary--tag a-tag">
            My Shop
          </Link>
        )}
        <SortFilter
          mySellers={mySellers}
          setMySellers={setMySellers}
          allSellers={allSellers}
          setAllSellers={setAllSellers}
        />
      </div>
    </div>
  );
};

export default Navbar;
import React, { useEffect } from "react";
import { NavLink, Outlet, useNavigate } from "react-router-dom";

const Product: React.FC = () => {
  const handleDisableLink = (evt: React.MouseEvent<HTMLAnchorElement>) => {
    evt.preventDefault();
  };
  let navigate = useNavigate();
  useEffect(() => {
    navigate("/addProduct/category");
  }, []);
  return (
    <div className="Product">
      <div className="Product__tabs">
        <NavLink
          onClick={handleDisableLink}
          to={"/addProduct/category"}
          className={"Product__tabs--category"}
        >
          Category
        </NavLink>
        <NavLink
          onClick={handleDisableLink}
          to={"/addProduct/basic-information"}
          className="Product__tabs--category"
        >
          Basic info
        </NavLink>
        <NavLink
          onClick={handleDisableLink}
          to={"/addProduct/price-image-desc"}
          className="Product__tabs--category"
        >
          Price, Image & Desc
        </NavLink>
        <NavLink
          onClick={handleDisableLink}
          to={"/addProduct/publish"}
          className="Product__tabs--category"
        >
          Publish
        </NavLink>
      </div>
      <div className="Product__Routes">
        <Outlet />
      </div>
    </div>
  );
};

export default Product;

/* {sellerId, productName, category, sellOrDemand, job, service, year, locationName, make, model, 
kilometers, used, sellOrRent, holds, sold, price, brand, imgSrc, desc} */
/* {  
  // productId:String,
  productName:String,
  category:{
    type: String,
    enum: [
      "fruit", "vegetable", "dairy", "meat", 
      "vehicle", "console", "game", "house", 
      "apartment", "smartphone", "pc",
      "work", "productivity", "pool", "tools",
      "forHouse"
    ]
  },
  price: Number,
  desc: String,
  imgSrc:[String],
  brand: String,
  make:String,
  model: String,
  year:Number,
  location:String,
  kilometers:Number,
  useed:{type: Boolean, default: false},
  sellOrRent:{
    type: String,
    enum:["sell", "rent"]
  },
  holds:{
  type: Number,
  default: 0
  },
  sold:{
    type: Number,
    default: 0
  } */
import React, { createContext, useState, useEffect } from "react";
import { getLoggedUserName, getProduct, getSellerById } from "../api/api";

export const ProfileDetailContext = createContext<any | null>(null);

export interface ProfileDetailContextProps {
  allSellers: {}[] | undefined;
  setAllSellers: React.Dispatch<React.SetStateAction<{}[] | undefined>>;
  sellerId: string;
  mySellers: any[] | undefined;
  setMySellers: React.Dispatch<React.SetStateAction<any[] | undefined>>;
  loggedIn: boolean;
  setLoggedIn: React.Dispatch<React.SetStateAction<boolean>>;
  rerender: boolean;
  setRerender: React.Dispatch<React.SetStateAction<boolean>>;
}

export const ProfileDetailProvider: React.FC<ProfileDetailContextProps> = ({
  allSellers,
  setAllSellers,
  children,
  sellerId,
  mySellers,
  setMySellers,
  rerender,
  setRerender,
  loggedIn,
  setLoggedIn,
}) => {
  const [sellerDetail, setSellerDetail] = useState<{
    show: boolean;
    sellerId: string;
  }>({ show: false, sellerId: "" });
  const [detailCard, setDetailCard] = useState<{
    sellerId: string;
    productId: string;
    show: boolean;
    sellerName: string;
  }>({ show: false, sellerId: "", productId: "", sellerName: "" });
  const [editProduct, setEditProduct] = useState<{
    sellerId: string;
    productId: string;
    show: boolean;
    sellerName: string;
  }>({ show: false, sellerId: "", productId: "", sellerName: "" });
  const [profileDetail, setProfileDetail] = useState<{
    show: boolean;
    sellerId: string;
  }>({ show: false, sellerId: "" });
  const [productDetailArr, setProductDetailArr] = useState<{}[]>();

  const [customerBasketToBuy, setCustomerBasketToBuy] = useState<
    {
      sellerId: string;
      productId: string;
      pieces: number;
      price: number;
      productName: string;
      imgSrc: string;
    }[]
  >([]);
  const [loggedSellerInfo, setLoggedSellerInfo] = useState<
    | {
        sellerId: string;
        rating: number;
        sellerName: string;
        date: string;
        likes: {}[];
        sells: string[];
      }
    | undefined
  >(undefined);
  const [clickedSellerInfo, setClickedSellerInfo] = useState<
    | {
        sellerId: string;
        rating: number;
        sellerName: string;
        date: string;
        likes: {}[];
        sells: string[];
        email: string;
      }
    | undefined
  >(undefined);

  const closeWindow = () => {
    setDetailCard((preVal) => {
      return { ...preVal, show: false };
    });
    setEditProduct((preVal) => {
      return { ...preVal, show: false };
    });
  };

  const [hideChat, setHideChat] = useState(true);

  const thisSellerIsLoggedIn = async (id: string) => {
    try {
      let response1 = await getSellerById(id);
      let response2 = await getLoggedUserName();
      // console.log(response1.data, response2.data);
      return response1.data.name === response2.data.name;
    } catch (err) {
      return false;
    }
  };

  const createClickedSellerInfo = async (id: string) => {
    try {
      let response = await getSellerById(id);
      // console.log(response.data);
      let info = response.data as {
        id: string;
        rating: number;
        name: string;
        date: string;
        likes: {}[];
        sells: string[];
        email: string;
      };
      setClickedSellerInfo({
        sellerId: id,
        rating: info.rating,
        date: info.date,
        sellerName: info.name,
        likes: info.likes.slice(0, 4),
        sells: info.sells.slice(0, 4),
        email: info.email,
      });
    } catch (err) {
      console.log(err);
    }
  };

  const createProductDetailArr = async (
    sellerId: string,
    productIdArr: string[]
  ) => {
    productIdArr.forEach(async function (id) {
      getProduct(sellerId, id).then((response) => {
        setProductDetailArr((oldArr) => {
          if (oldArr !== undefined) {
            return unique([...oldArr, response.data], "_id");
          } else {
            return [response.data];
          }
        });
      });
    });
    // console.log(array);
  };

  useEffect(() => {
    if (sellerId) {
      console.log(sellerId);
      if (sellerId) {
        setProfileDetail((oldProps) => {
          return { ...oldProps, sellerId: sellerId };
        });
      }
      (async function provideLoggedSellerInfo() {
        try {
          let response = await getSellerById(sellerId);
          // console.log(response.data);
          let info = response.data as {
            sellerId: string;
            rating: number;
            name: string;
            date: string;
            likes: {}[];
            sells: string[];
          };
          setLoggedSellerInfo({
            sellerId,
            rating: info.rating,
            date: info.date,
            sellerName: info.name,
            likes: info.likes.slice(0, 4),
            sells: info.sells.slice(0, 4),
          });
        } catch (err) {
          console.log(err);
        }
      })();
    }
  }, [sellerId]);

  return (
    <ProfileDetailContext.Provider
      value={{
        allSellers,
        setAllSellers,
        sellerDetail,
        setSellerDetail,
        detailCard,
        setDetailCard,
        closeWindow,
        profileDetail,
        setProfileDetail,
        editProduct,
        setEditProduct,
        mySellers,
        setMySellers,
        loggedIn,
        setLoggedIn,
        rerender,
        setRerender,
        hideChat,
        setHideChat,
        thisSellerIsLoggedIn,
        loggedSellerInfo,
        createClickedSellerInfo,
        clickedSellerInfo,
        createProductDetailArr,
        productDetailArr,

        customerBasketToBuy,
        setCustomerBasketToBuy,
      }}
    >
      {children}
    </ProfileDetailContext.Provider>
  );
};

function unique(arrOfObj: {}[], prop: string) {
  let newArr: {}[] = [];
  arrOfObj.forEach((val: any) => {
    if (
      undefined ===
      newArr.find(
        (value: any) =>
          JSON.stringify(value[prop]) === JSON.stringify(val[prop])
      )
    ) {
      newArr.push(val);
    }
  });
  return newArr;
}
import React, { useState, createContext, useEffect } from "react";

export const ProductContext = createContext<any | null>(null);

export const ProductProvider: React.FC = (props: any) => {
  const [ad, setAd] = useState<
    | {
        sellOrRent: string;
        sellOrDemand: string;
        productName: string;
        category: string;
        year: number;
        locationName: string;
        price: number;
        holds: number;
        sold: number;
        brand: string;
        make: string;
        model: string;
        imgSrc: string[];
        used: boolean;
        desc: string;
      }
    | {}
  >({});

  const [categoryTab, setCategoryTab] = useState("");
  const [basicInfoTab, setBasicInfoTab] = useState<
    | {
        sellOrDemand: string;
        productName: string;
        category: string;
        year: number;
        locationName: string;
      }
    | {}
  >({});
  const [pidTab, setPidTab] = useState<
    | {
        price: number;
        holds: number;
        sold: number;
        brand: string;
        make: string;
        model: string;
        imgSrc: string[];
        used: boolean;
        desc: string;
      }
    | {}
  >({});

  useEffect(() => {
    setAd({ sellOrRent: categoryTab, ...basicInfoTab, ...pidTab });
  }, [categoryTab, basicInfoTab, pidTab]);

  return (
    <ProductContext.Provider
      value={{
        pidTab,
        basicInfoTab,
        setCategoryTab,
        setBasicInfoTab,
        setPidTab,
        ad,
        setAd,
      }}
    >
      {props.children}
    </ProductContext.Provider>
  );
};
/*
COLORS
LightGreen : #7ed56f, rgba(126, 213, 111, 1)
MediumGreen : #55c57a, rgba(85, 197, 122, 1)
DarkGreen : #28b485, rgba(40, 180, 133, 1)

Primary: #eb2f64
Primary light: #FF3366
Primary dark: #BA265D

Grey light 1: #faf9f9
Grey light 2: #f4f2f2
Grey light 3: #f0eeee
Grey light 4: #ccc

Grey dark 1: #333
Grey dark 2: #777
Grey dark 3: #999
*/
$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-secondary-light: #ffb900;
$color-secondary-dark: #ff7730;

$color-tertiary-light: #2998ff;
$color-tertiary-dark: #5643fa;

// $color-gray-light: rgba(#ecebeb, $alpha: 0.9);
$color-gray-light: #e4e9eeee;
// $color-gray-light: #ecebeb;
// $color-gray-light-2: rgba(212, 212, 212, $alpha: 0.99);
$color-gray-light-2: #c3d3ddfa;
// $color-gray-light-2: rgb(212, 212, 212);
// $color-gray-light-3: rgb(194, 194, 194);
$color-gray-light-3: #a8bac7;

$color-grey-dark: rgb(112, 112, 112);
$color-grey-dark-2: rgb(63, 63, 63);
// $color-white: rgba(#fff, $alpha: 0.7);
$color-white: #e7f1f8ef;
// $color-white: #fff;
$color-black: #000;
$color-black-lighter: rgb(58, 58, 58);

$details-gradient: linear-gradient(to right, #d4d4d4 30%, #61a4d4f3 100%);
$details-gradient-2: linear-gradient(to right, #d4d4d48e 30%, #61b0d450 100%);

// FONT
$logo-size: 5rem;
$default-font-site: 1.6rem;
$document-text-size: 1.3rem;

//GRID variables
$grid-width: 120rem;
$grid-width-2: 100rem;
$gutter-vertical: 8rem;
$gutter-horizontal: 6rem;

//PAGE variables
$site-margin: 2rem;
$site-margin-2: 0 2rem 2rem 2rem;
$min-height-of-view: 100rem;
$min-height-of-view-2: 70vh;

//Box variables

$login-box-width: 55rem;
$login-box-height: 21rem;
$register-box-height: 45rem;
$border-radius-primary: 1rem;
$border-radius-secondary: 0.3rem;

//Footer
$footer-height: 25rem;
$footer-margin-top: 7rem;
.Basket {
  z-index: 1000;
  border-radius: 1rem;
  width: 75rem;
  height: 60rem;
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  top: 7rem;
  overflow: hidden;
  background: $details-gradient;
  box-shadow: 0px 0px 22px 2px rgba(0, 0, 0, 0.66);
  color: $color-grey-dark;
  letter-spacing: 0.3rem;
  &__nav {
    height: 7%;
    // background-color: $color-grey-dark;
    // background-color: rgba($color: $color-gray-light, $alpha: 0.7);
    background-color: $color-gray-light;
    // background: $details-gradient;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    h3:hover {
      // color: rgb(255, 177, 74);
      color: black;
      cursor: pointer;
    }

    &--logo {
      position: absolute;
      // top: 2rem;
      left: 6%;
      // border: 2px solid $color-grey-dark;
      // border-radius: 1rem;
      color: $color-grey-dark !important;
      font-size: 2rem !important;
      cursor: auto !important;
    }
    &--icons {
      position: absolute;
      right: 6%;
      font-size: 1.5rem;
      i {
        color: $color-grey-dark !important;
        padding: 0 0.3rem;
        cursor: pointer;
        &:last-child:hover {
          color: red !important;
          font-size: 1.8rem;
        }
      }
      // border: 1px solid red;
    }
  }
  &__header {
    width: 86.5%;
    margin: 0 auto;
    letter-spacing: 0.2rem;
    position: relative;
    display: flex;
    justify-content: center;
    // align-items: center;
    height: 6%;
    &--div {
      // border: 2px solid green;
      height: 3rem;
      width: 100%;
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: absolute;
      // bottom: 1.4rem;
      left: 0.4rem;
      letter-spacing: 0.3rem;
      h3 {
        text-transform: capitalize;
        cursor: pointer;
        height: 1.5rem;
        &:hover {
          font-weight: 900;
          letter-spacing: 0.2rem;
          transform: translateY(-2px);
        }
      }
      h3:first-child {
        color: $color-grey-dark;
        &:hover {
          color: rgba(0, 0, 0, 0.678);
        }
      }
      h3:last-child {
        color: $color-white;
        &:hover {
          color: rgb(255, 255, 255);
        }
      }
    }
  }
  &__body {
    margin: 0 auto;
    padding: 1rem;
    width: 95%;
    height: 80%;
    position: relative;
    border-radius: 1rem;
    background-color: rgba($color: $color-gray-light, $alpha: 0.7);
    // background: $details-gradient-2;

    &--readyToBuy {
      // border: 2px solid greenyellow;
      overflow-y: scroll;
      overscroll-behavior-y: contain;
      scroll-snap-type: y proximity;
      & > div:last-child {
        scroll-snap-align: top;
      }
      height: 50%;
      border-bottom: 2px ridge rgba(17, 0, 255, 0.274);
      &-items {
        .itemDiv {
          max-height: 5rem;
          width: 97%;
          display: flex;
          justify-content: space-between;
          margin: 0.5rem;
          // border: 2px solid greenyellow;
          &__div1 {
            height: 5rem;
            display: flex;
            align-items: center;
            img {
              border-radius: 1rem;
              max-height: 100%;
              margin-right: 1rem;
            }
          }
          &__div2 {
            align-items: center;
            justify-content: flex-start;
            display: flex;
            flex-direction: column;
            position: relative;
            padding-top: 0.3rem;
            // border: 2px solid greenyellow;
            &--price {
              display: flex;
              width: 13rem;
              justify-content: space-between;
            }
            &--buttons {
              position: absolute;
              bottom: 0.2rem;
              right: 0.2rem;
              display: flex;
              height: 1.6rem;
              width: 14rem;
              justify-content: space-between;
              #accept {
                min-width: 14rem !important;
              }
              button {
                height: 1.6rem;
                // border: 2px solid greenyellow;
                background-color: $color-gray-light-2;
                border: 1px solid #c8bfc4;
                box-shadow: inset 1px 1px 2px #ddd8dc;
                outline: none;
                border-radius: 0.6rem;
                // height: 2rem;
                padding: 0 0.2rem;
                color: $color-grey-dark;
                letter-spacing: 0.1rem;
                min-width: 7rem;
                margin-right: 0.3rem;
                cursor: pointer;
                &:first-child:hover {
                  letter-spacing: 0.08rem;
                  // font-weight: 600;
                  border: 1px solid #ff5151;
                  box-shadow: inset 1px 1px 2px #fc8585;
                  background-color: #fc8585;
                  // transform: translate(-1px, -1px);
                }
                &:last-child:hover {
                  letter-spacing: 0.08rem;
                  font-weight: 600;
                  border: 1px solid #6af35e;
                  box-shadow: inset 1px 1px 2px #a0f399;
                  background-color: #a0f399;
                  // transform: translate(-1px, -1px);
                }
              }
            }
          }
        }
      }
    }
    &--purchased {
      // border: 2px solid greenyellow;
      overflow-y: scroll;
      overscroll-behavior-y: contain;
      scroll-snap-type: y proximity;
      & > div:last-child {
        scroll-snap-align: top;
      }
      height: 50%;
      // border-bottom: 2px ridge orange;
      &-items {
        #sold-box {
          max-height: 5rem;
        }
        .itemDiv {
          max-height: 5rem;
          width: 97%;
          display: flex;
          justify-content: space-between;
          margin: 0.5rem;
          // border: 2px solid greenyellow;
          &__div1 {
            height: 5rem;
            display: flex;
            align-items: center;
            img {
              border-radius: 1rem;
              max-height: 100%;
              margin-right: 1rem;
            }
          }

          &__div2 {
            align-items: center;
            justify-content: flex-start;
            display: flex;
            flex-direction: column;
            position: relative;
            padding-top: 0.3rem;
            // border: 2px solid greenyellow;
            #sold-price {
              width: 23.8rem;
              // background-color: black;
            }
            &--price {
              display: flex;
              width: 13rem;
              justify-content: space-between;
            }
            #sold {
              // border: 2px solid greenyellow;
              align-items: center;
              position: relative;
              height: 3rem;
              width: 24rem;
              .sold-div {
                bottom: 0.5rem;
                left: 0rem;
                display: flex;
                // flex-direction: column;
                position: relative;
                .sold-div-2 {
                  display: flex;
                  position: absolute;
                  right: -16.3rem;
                  bottom: -2rem;
                  .home {
                    color: rgb(0, 173, 52);
                    opacity: 1;
                  }
                  .sent {
                    color: rgb(0, 173, 52);
                    opacity: 1;
                  }
                  .traveling {
                    color: rgb(0, 173, 52);
                    opacity: 1;
                  }
                  .arrived {
                    color: rgb(0, 173, 52);
                    opacity: 1;
                  }
                  h4 {
                    opacity: 0.7;
                    margin: 0.5rem;
                  }
                  h4:hover {
                    color: blue;
                    opacity: 1;
                    cursor: pointer;
                  }
                }
              }
            }
            &--shipping {
              position: absolute;
              bottom: 0.2rem;
              // right: 0.2rem;
              display: flex;
              height: 1.6rem;
              width: 14rem;
              justify-content: space-between;
            }
          }
        }
      }
    }
  }
  &__footer {
    margin: 2rem auto;
    width: 90%;
    height: 17%;
    // background-color: greenyellow;
    position: relative;
    display: flex;
    justify-content: space-between;
    div {
      display: flex;
    }
    button {
      height: 1.6rem;
      border-radius: 1rem;
      background-color: $color-gray-light-2;
      border: 1px solid #c8bfc4;
      box-shadow: inset 1px 1px 2px #ddd8dc;
      outline: none;
      height: 2rem;
      padding: 0 1.7rem;
      color: $color-grey-dark;
      letter-spacing: 0.3rem;
      cursor: pointer;
      &:hover {
        letter-spacing: 0.23rem;
        font-weight: 600;
        border: 1px solid #6af35e;
        box-shadow: inset 1px 1px 2px #a0f399;
        background-color: #a0f399;
        // transform: translate(-1px, -1px);
      }
    }
  }
}
.Card {
  min-width: 100%;

  // max-height: 38rem;
  display: flex;
  flex-direction: column;
  justify-content: center;

  margin: 1rem auto;
  border-radius: 1rem;
  padding: 0.5rem;
  overflow: hidden;
  background-color: rgba($color-gray-light, $alpha: 0.7);
  letter-spacing: 0.1rem;
  font-size: $default-font-site;
  font-weight: 100;
  color: $color-black-lighter;
  &__img {
    // border: 2px groove $color-white;
    max-height: 45rem;
    padding: 0.5rem;
    min-height: 60%;
    width: 100%;
    display: block;
    background-size: cover;
    border-radius: 1rem;
    background-color: rgba($color-gray-light, $alpha: 0.7);

    overflow: hidden;
  }
  &__heading {
    padding: 1rem;
    // border-radius: 1rem;
    // border-bottom: 4px groove $color-white;
    .h4__tag {
      cursor: pointer;
    }
  }
}
.CardDetails {
  // border: 2px solid lightblue;
  z-index: 100;
  position: fixed;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  min-width: 92rem;
  border-radius: $border-radius-primary;
  // margin: 3rem auto;
  display: flex;
  height: 65rem;
  // background-color: $color-gray-light-2;
  background: $details-gradient;
  box-shadow: 0px 0px 22px 2px rgba(0, 0, 0, 0.66);
  &__images {
    // border: 2px solid lightblue;
    height: 100%;
    padding: 1.5rem;
    width: 50%;
    display: flex;
    flex-direction: column;
    &--main {
      // border: 2px solid red;
      border: 0.3px solid $color-grey-dark;
      border-radius: 0.5rem;
      background-color: $color-white;
      align-self: center;
      height: 100%;
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      img {
        max-width: 70%;
        max-height: 70%;
      }
    }
    &--list {
      margin-top: 2rem;
      transform: translateY(-1rem);
      // border: 2px solid purple;
      display: grid;
      grid-template-columns: 14% 14% 14% 14% 14% 14% 14%;
      gap: 0.5%;
      img {
        width: 6rem;
        height: 6rem;
        border-radius: 50%;
        background-color: $color-white;
      }
    }
  }
  &__text {
    // border: 3px solid yellow;
    height: 100%;
    position: relative;
    width: 50%;
    letter-spacing: 0.1rem;
    font-size: $default-font-site;
    font-weight: 100;
    color: $color-black-lighter;
    display: flex;
    flex-direction: column;

    // justify-content: center;
    align-items: center;
    &--specs {
      // height: 100%;
      width: 100%;
      h3 {
        margin-left: 1.3rem;
        cursor: pointer;
      }
      border-left: 3px groove $color-white;
      // background-color: $color-gray-light;
      border-radius: 0.3rem;
      margin: 5rem 0 3rem 0;
      width: 70%;
      & > p::before {
        content: "";
        margin: 0 0.5rem 0 1rem;
      }
    }
    &--desc {
      padding: 2rem;
      border: 0.3px solid $color-grey-dark;
      background-color: $color-white;
      border-radius: 0.5rem;
      width: 70%;
      height: 22rem;
      position: absolute;
      bottom: 9.5rem;
      word-wrap: break-word;
      overflow: scroll;
      p {
        width: 100%;
      }
    }
    &--btn {
      position: absolute;
      bottom: 2rem;
      margin-bottom: 1.5rem;
      justify-self: center;
      max-width: 100%;
      // display: grid;
      // grid-template-columns: 30%, 30%, 30%;
      button {
        // max-width: 30%;
        max-width: 10em;
        text-transform: uppercase;
        background-color: $color-gray-light-2;
        border: 1px solid #c8bfc4;
        box-shadow: inset 1px 1px 2px #ddd8dc;
        outline: none;
        border-radius: 10rem;
        height: 3.5rem;
        padding: 0 2rem;
        color: $color-grey-dark;
        letter-spacing: 0.3rem;
        cursor: pointer;
        &:nth-child(2) {
          margin: 0 1rem 0 1rem;
        }
        &:hover {
          letter-spacing: 0.3rem;
          font-weight: 600;
        }
      }
    }
  }
}
.Chat {
  border-top-right-radius: 1rem;
  border-top-left-radius: 1rem;
  width: 35rem;
  height: 44rem;
  position: fixed;
  right: 5rem;
  bottom: 0;
  background-color: $color-gray-light;
  overflow: hidden;
  box-shadow: 0px 0px 15px 0.3px rgba(0, 0, 0, 0.548);
  color: $color-grey-dark;
  letter-spacing: 0.3rem;
  &__nav {
    height: 10%;
    // background-color: $color-grey-dark;
    // background-color: $color-gray-light-2;
    background: $details-gradient;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    h3:hover {
      // color: rgb(255, 177, 74);
      color: black;
      cursor: pointer;
    }
    &--logo {
      position: absolute;
      top: 2rem;
      left: 6%;
      font-size: 5rem;
      border: 2px solid $color-grey-dark;
      border-radius: 1rem;
    }
    &--icons {
      position: absolute;
      right: 6%;
      font-size: 1.5rem;
      i {
        padding: 0 0.3rem;
        cursor: pointer;
        &:first-child:hover {
          color: rgb(255, 177, 74);
          font-size: 1.8rem;
        }
        &:last-child:hover {
          color: red;
          font-size: 1.8rem;
        }
      }
      // border: 1px solid red;
    }
  }
  &__header {
    // border: 2px solid green;
    letter-spacing: 0.2rem;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 10%;
    &--chater {
      position: absolute;
      bottom: 1.4rem;
      left: 25%;
      h3 {
        text-transform: capitalize;
      }
    }
  }
  &__body {
    margin: 0 auto;
    width: 90%;
    height: 60%;
    position: relative;
    border-radius: 1rem;
    // background-color: $color-gray-light-2;
    background: $details-gradient-2;

    overflow-y: scroll;
    overscroll-behavior-y: contain;
    scroll-snap-type: y proximity;
    & > div:last-child {
      scroll-snap-align: end;
    }
    &--first {
      transform: translateX(10%);

      background-color: $color-gray-light;
      // background-color: greenyellow;
      width: 90%;
      display: flex;
      // align-items: center;
      flex-direction: column;
      padding: 0.8rem 1.3rem;
      border-radius: 1rem;
      margin-bottom: 0.3rem;
      nav {
        display: flex;
        justify-content: space-between;
        width: 100%;
        opacity: 0.6;
        margin-bottom: 0.5rem;
      }
    }
    &--second {
      // background-color: rgb(255, 82, 82);
      background-color: $color-grey-dark;
      color: white;
      width: 90%;
      // height: 30%;
      display: flex;
      // align-items: center;
      flex-direction: column;
      padding: 0.8rem 1.3rem;
      border-radius: 1rem;
      margin-bottom: 0.3rem;
      nav {
        display: flex;
        justify-content: space-between;
        width: 100%;
        opacity: 0.6;
        margin-bottom: 0.5rem;
      }
    }
  }
  &__footer {
    margin: 0 auto;
    width: 98%;
    height: 17%;
    // background-color: greenyellow;
    position: relative;
    textarea {
      position: absolute;
      left: 5%;
      top: 7%;
      width: 90%;
      height: 92%;
      border-radius: 1rem;
      padding: 0.3rem 1rem;
      outline: none;
      color: $color-grey-dark;
      border-color: $color-grey-dark;
    }
    button {
      position: absolute;
      right: 6%;
      bottom: 7%;

      text-transform: uppercase;
      background-color: $color-gray-light-2;
      border: 1px solid #c8bfc4;
      box-shadow: inset 1px 1px 2px #ddd8dc;
      outline: none;
      border-radius: 10rem;
      height: 2rem;
      padding: 0 1.7rem;
      color: $color-grey-dark;
      letter-spacing: 0.3rem;
      cursor: pointer;
      &:hover {
        letter-spacing: 0.2rem;
        font-weight: 900;
        // transform: translate(-1px, -1px);
      }
    }
  }
}
.Chat-hide {
  border-top-right-radius: 1rem;
  border-top-left-radius: 1rem;
  width: 35rem;
  height: 5rem;
  position: fixed;
  right: 5rem;
  bottom: 0;
  background-color: $color-gray-light;
  overflow: hidden;
  box-shadow: 0px 0px 15px 0.3px rgba(0, 0, 0, 0.548);
  color: $color-grey-dark;
  letter-spacing: 0.3rem;
  &__nav {
    height: 100%;
    // background-color: $color-grey-dark;
    // background-color: $color-gray-light-2;
    background: $details-gradient;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    h3:hover {
      // color: rgb(131, 218, 0);
      color: black;
      cursor: pointer;
    }
    &--logo {
      position: absolute;
      top: 1rem;
      left: 6%;
      font-size: 3rem;
      border: 2px solid $color-grey-dark;
      border-radius: 1rem;
    }
    &--icons {
      position: absolute;
      right: 6%;
      font-size: 1.5rem;
      i {
        padding: 0 0.3rem;
        cursor: pointer;
        &:first-child:hover {
          color: rgb(131, 218, 0);
          font-size: 1.8rem;
        }
        &:last-child:hover {
          color: red;
          font-size: 1.8rem;
        }
      }
      // border: 1px solid red;
    }
  }
}
.EditProducts {
  // border: 2px solid lightblue;
  border-radius: 1rem;
  z-index: 100;
  position: fixed;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  min-width: 92rem;
  // margin: 3rem auto;
  display: flex;
  height: 66rem;
  background: $details-gradient;
  // background-color: $color-gray-light-2;
  box-shadow: 0px 0px 22px 2px rgba(0, 0, 0, 0.66);
  &__images {
    // border: 2px solid lightblue;
    height: 100%;
    padding: 1.5rem;
    width: 50%;
    display: flex;
    flex-direction: column;
    &--main {
      // border: 2px solid red;
      border: 0.3px solid $color-grey-dark;
      border-radius: 0.5rem;
      background-color: $color-white;
      align-self: center;
      height: 100%;
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      div {
        display: flex;
        justify-content: center;
        align-items: center;
        img {
          max-width: 70%;
          max-height: 70%;
        }
        i {
          display: none;
        }
      }
    }
    &--list {
      margin-top: 2rem;
      transform: translateY(-1rem);
      // border: 2px solid purple;
      max-height: 19%;

      position: relative;
      .fixDiv {
        width: 100%;
        max-height: 90%;
        overflow-y: scroll;
        display: grid;
        grid-template-columns: 13.6% 13.6% 13.6% 13.6% 13.6% 13.6% 13.6%;
        gap: 0.5%;
        div {
          position: relative;
          img {
            width: 5.6rem;
            height: 5.6rem;
            border-radius: 50%;
            background-color: $color-white;
            cursor: pointer;
          }
          i {
            font-size: 1.7rem;
            font-weight: 900;
            border-radius: 50%;
            color: $color-grey-dark;
            // transform: translate(10%, 50%);
            // border: 3px inset #1c6ea4;
            position: absolute;
            top: 0;
            // border: 2px solid purple;
          }
          i:hover {
            color: red;
            font-size: 2rem;
            cursor: pointer;
          }
          .addImage__img {
            width: 6rem;
            height: 6rem;
            opacity: 0.6;
            &:hover {
              opacity: 0.8;
            }
          }
        }
      }
    }
    .insertion {
      // border: 2px solid red;
      position: absolute;
      top: 95.5%;
      width: 95.5%;
      display: flex;
      &--input {
        background-color: $color-gray-light-2;
        width: 100%;
        border: 1px solid #c8bfc4;
        box-shadow: inset 1px 1px 2px #ddd8dc;
        outline: none;
        border-radius: 10rem;
        height: 2rem;
        padding: 0 1.5rem;
        color: $color-grey-dark;
        letter-spacing: 0.1rem;
        cursor: text;
      }
      &--icon {
        position: absolute;
        left: 100%;
        font-size: 2rem;
        border-radius: 50%;
        // border: 2px solid red;
        &:hover {
          color: rgb(62, 253, 78);
          // color: rgba(0, 0, 0, 0.66);
          cursor: pointer;
        }
      }
    }
  }
  &__text {
    // border: 3px solid yellow;
    height: 100%;
    position: relative;
    width: 50%;
    letter-spacing: 0.1rem;
    font-size: $default-font-site;
    font-weight: 100;
    color: $color-black-lighter;
    display: flex;
    flex-direction: column;

    // justify-content: center;
    align-items: center;
    &--specs {
      h3 {
        margin-left: 1.3rem;
        cursor: pointer;
      }
      // height: 100%;
      width: 100%;
      border-left: 3px groove $color-white;
      // background-color: $color-gray-light;
      border-radius: 0.3rem;
      margin: 5rem 0 3rem 0;
      width: 70%;
      &-p {
        // border: 2px solid green;
        width: 35rem;
        display: flex;
        position: relative;
        margin: 0 0.5rem 0 1.3rem;
        select {
          & > option {
            font-size: 1.4rem;
            background-color: $color-gray-light-2;
          }
          position: absolute;
          left: 45%;
          font-size: 1.6rem;
          height: 2rem;
          // transform: translateY(-0.2rem);
          text-transform: capitalize;
          // max-width: 8rem;
          display: inline-block;
          outline: none;
          color: #74646e;
          border: none;
          background-color: transparent;
          color: #555;
          margin: 0;
          // text-overflow: ellipsis;
          white-space: nowrap;
          letter-spacing: 0.1rem;
          font-weight: 400;
          color: $color-grey-dark;
          -webkit-appearance: none;
          -moz-appearance: none;
          appearance: none;
          cursor: pointer;
          &::-ms-expand {
            display: none;
          }
          &:hover {
            color: rgba($color-grey-dark, 0.8);
          }
        }
        input {
          position: absolute;
          left: 45%;
          font-size: 1.6rem;
          height: 2rem;
          text-transform: capitalize;
          max-width: 15rem;
          display: inline-block;
          outline: none;
          color: #74646e;
          border: none;
          background-color: transparent;
          color: #555;
          margin: 0;
          // text-overflow: ellipsis;
          white-space: nowrap;
          letter-spacing: 0.1rem;
          font-weight: 400;
          color: $color-grey-dark;
          -webkit-appearance: none;
          -moz-appearance: none;
          appearance: none;
          cursor: text;
          &:hover {
            color: rgba($color-grey-dark, 0.8);
          }
        }
      }
    }
    &--desc {
      padding: 2rem;
      border: 0.3px solid $color-grey-dark;
      background-color: $color-white;
      border-radius: 0.5rem;
      width: 70%;
      height: 22rem;
      position: absolute;
      bottom: 9.5rem;
      word-wrap: break-word;
      overflow: scroll;
      p {
        width: 100%;
      }
    }
    &--btn {
      position: absolute;
      bottom: 2rem;
      margin-bottom: 1.5rem;
      justify-self: center;
      max-width: 100%;
      button {
        text-transform: uppercase;
        background-color: $color-gray-light-2;
        border: 1px solid #c8bfc4;
        box-shadow: inset 1px 1px 2px #ddd8dc;
        outline: none;
        border-radius: 10rem;
        height: 3.5rem;
        padding: 0 2rem;
        color: $color-grey-dark;
        letter-spacing: 0.3rem;
        cursor: pointer;
        &:nth-child(2) {
          margin: 0 1rem 0 1rem;
        }
        &:hover {
          letter-spacing: 0.2rem;
          font-weight: 900;
        }
      }
    }
  }
}
.Login {
  z-index: 10000;
  position: fixed;
  left: 50%;
  top: 30%;
  transform: translateX(-50%);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-width: $login-box-width;
  height: $login-box-height;
  // border: 2px solid red;
  // width: $login-box-width;
  // height: $login-box-height;
  border-radius: $border-radius-primary;
  background-color: $color-gray-light-2;
  box-shadow: 0px 0px 22px 2px rgba(0, 0, 0, 0.66);
  color: $color-grey-dark;
  letter-spacing: 0.3rem;
  &__container {
    // border: 15px solid green;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    width: 80%;
    &--round {
      border-radius: 10rem;
      margin: 0.7rem;
      width: 100%;
      height: 3rem;
      border: 1px solid #c8bfc4;
      // box-shadow: inset 1px 1px 2px #ddd8dc;
      padding-left: 2rem;
      background-color: $color-white;
      border: 1px solid $color-gray-light;
      box-shadow: inset 1px 1px 2px #ddd8dc;
      // height: 100%;
      // width: 15rem;
      padding: 0 7%;
      outline: none;
      color: $color-grey-dark;
      // color: $color-white;
      &:focus {
        outline: none;
      }
    }
    &--check {
      display: flex;
    }
  }
  &__btn {
    border-radius: 10rem;
    min-width: 10rem;
    height: 2.5rem;
    margin: 1rem;
    outline: none;
    border: node;
    font-size: 1rem;
    text-transform: uppercase;
    background-color: $color-gray-light;
    border: 1px solid $color-gray-light;
    box-shadow: inset 1px 1px 2px #ddd8dc;
    color: $color-grey-dark;
    letter-spacing: 0.3rem;
    cursor: pointer;
    &:hover {
      letter-spacing: 0.2rem;
      font-size: 1.1rem;
      font-weight: 900;
    }
  }
  .fontAwesome {
    font-family: Arial, "Font Awesome 5 Free";
  }
}
.logout {
  z-index: 10000;
  position: fixed;
  left: 50%;
  top: 10%;
  transform: translateX(-50%);
  min-width: 92rem;
  height: 65rem;
  display: flex;
  // flex-direction: column;
  justify-content: center;
  align-items: center;
  // width: 27vw;
  & > * {
    margin-bottom: 2.5rem;
  }
  &__btn {
    // min-width: 13rem;

    background-color: $color-gray-light-2;
    border: 1px solid #c8bfc4;
    box-shadow: inset 1px 1px 2px #ddd8dc;
    outline: none;
    border-radius: 10rem;
    height: 3.5rem;
    padding: 0 2rem;
  }
}
.MyProfile {
  // border: 2px solid lightblue;
  border-radius: $border-radius-primary;
  z-index: 10;
  // position: absolute;
  // left: 50%;
  // top: 50%;
  // transform: translate(-50%, -50%);
  min-width: 100%;
  min-height: 100%;
  // margin: 3rem auto;
  display: flex;
  max-height: 70%;
  // background-color: $color-gray-light-2;
  background: $details-gradient;
  box-shadow: 0px 0px 22px 2px rgba(0, 0, 0, 0.66);

  &__images {
    // border: 2px solid lightblue;
    padding: 1.5rem;
    width: 50%;
    display: flex;
    overflow: hidden;
    &--main {
      // border: 2px solid red;
      // border: 2px solid $color-grey-dark;
      padding: 1.5rem;
      border-radius: 0.5rem;
      background-color: $color-white;
      align-self: center;
      height: 100%;
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      img {
        max-width: 70%;
        max-height: 70%;
      }
    }
  }
  &__text {
    // border: 3px solid yellow;
    position: relative;
    width: 50%;
    letter-spacing: 0.1rem;
    font-size: $default-font-site;
    font-weight: 100;
    color: $color-black-lighter;
    display: flex;
    flex-direction: column;
    // justify-content: center;
    align-items: center;
    &--specs {
      i {
        margin-left: 1.3rem;
        cursor: pointer;
        &:hover {
          color: yellow;
        }
      }
      h3 {
        margin-left: 1.3rem;
      }
      border-left: 3px groove $color-white;
      // background-color: $color-gray-light;
      border-radius: 0.3rem;
      margin: 4rem 0 1rem 0;
      width: 70%;
      & > p::before {
        content: "";
        margin: 0 0.5rem 0 1rem;
      }
      div {
        margin-left: 1.3rem;
      }
    }
    &--desc {
      padding: 2rem;
      border: 0.3px solid $color-grey-dark;
      background-color: $color-white;
      border-radius: 0.5rem;
      width: 70%;
      height: 22rem;
      // position: absolute;
      bottom: 9.5rem;
      word-wrap: break-word;
      overflow: scroll;
      p {
        width: 100%;
      }
    }
    &--btn {
      margin-top: 3rem;
      display: flex;
      justify-content: center;
      align-items: center;
      outline: none;
      cursor: pointer;
      justify-self: center;
      max-width: 100%;

      .btnn {
        text-transform: uppercase;
        color: $color-grey-dark;
        letter-spacing: 0.3rem;

        color: $color-grey-dark;
        font-weight: 100;
        // max-width: 50%;
        background-color: $color-gray-light-2;
        border: 1px solid #c8bfc4;
        box-shadow: inset 1px 1px 2px #ddd8dc;
        outline: none;
        border-radius: 10rem;
        height: 3.5rem;
        padding: 0 2rem;
        cursor: pointer;
        &:nth-child(2) {
          margin: 0 1rem 0 1rem;
        }
        &:hover {
          letter-spacing: 0.2rem;
          font-weight: 900;
        }
      }
    }
  }
}
.Register {
  position: fixed;
  left: 50%;
  top: 20%;
  transform: translateX(-50%);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  // border: 2px solid red;
  width: $login-box-width;
  height: $register-box-height;
  border-radius: $border-radius-primary;
  background-color: $color-gray-light-2;
  box-shadow: 0px 0px 22px 2px rgba(0, 0, 0, 0.66);
  color: $color-grey-dark;
  &__container {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    width: 80%;
    &--round {
      border-radius: 10rem;
      margin: 0.7rem;
      width: 100%;
      height: 3rem;
      border: 1px solid #c8bfc4;
      padding-left: 2rem;
      background-color: $color-white;
      border: 1px solid $color-gray-light;
      box-shadow: inset 1px 1px 2px #ddd8dc;
      padding: 0 7%;
      outline: none;
      color: $color-grey-dark;
      &:focus {
        outline: none;
      }
    }
    &--check {
      // border: 2px solid red;
      height: 13rem;
      width: 45rem;
      margin: 0 auto;
      display: flex;
      justify-content: center;
      align-items: center;
      div {
        display: flex;
        margin: 3rem auto;
        width: 18rem;
        padding: 1rem;
        justify-content: center;
        flex-direction: column;
        border-radius: $border-radius-primary;
        border: 1px solid #c8bfc4;
        background-color: $color-white;
        border: 1px solid $color-gray-light;
        box-shadow: inset 1px 1px 2px #ddd8dc;
        select {
          .options {
            font-size: 1.6rem;
            color: rgba($color-grey-dark, 0.7);
            background-color: $color-gray-light;
          }
          font-size: 1.4rem;
          height: 2rem;
          text-transform: capitalize;
          max-width: 12rem;
          display: inline-block;
          outline: none;
          border: none;
          background-color: transparent;
          margin: 0;
          // text-overflow: ellipsis;
          white-space: nowrap;
          letter-spacing: 0.1rem;
          font-weight: 400;
          color: #74646e;
          -webkit-appearance: none;
          -moz-appearance: none;
          appearance: none;
          cursor: pointer;
          &::-ms-expand {
            display: none;
          }
          &:hover {
            color: rgba($color-grey-dark, 0.8);
          }
        }
      }
    }
  }
  &__btn {
    border-radius: 10rem;
    min-width: 12rem;
    height: 2.5rem;
    margin: 1rem 0 0.5rem 0;
    outline: none;
    border: node;
    font-size: 1rem;
    text-transform: uppercase;
    background-color: $color-gray-light;
    border: 1px solid $color-gray-light;
    box-shadow: inset 1px 1px 2px #ddd8dc;
    color: $color-grey-dark;
    letter-spacing: 0.3rem;
    cursor: pointer;
    &:hover {
      letter-spacing: 0.2rem;
      font-size: 1.1rem;
      font-weight: 900;
    }
  }
  .fontAwesome {
    font-family: Arial, "Font Awesome 5 Free";
  }
}
.Search {
  border-radius: 0.5rem;
  overflow: hidden;
  height: 2.5rem;
  display: flex;
  justify-content: center;
  align-items: center;
  &__input {
    border-bottom-left-radius: 10rem;
    border-top-left-radius: 10rem;
    background-color: $color-white;
    border: 1px solid $color-gray-light;
    box-shadow: inset 1px 1px 2px #ddd8dc;
    height: 100%;
    width: 15rem;
    padding: 0 7%;
    outline: none;
    color: $color-grey-dark;
  }
  &__btn {
    height: 100%;
    border-bottom-right-radius: 10rem;
    border-top-right-radius: 10rem;
    // border: 1px solid $color-grey-dark;
    background-color: $color-grey-dark;
    border: node;
    // color: $color-white;
    font-size: 1rem;
    width: 6.5rem;

    // text-transform: uppercase;
    background-color: $color-gray-light;
    border: 1px solid $color-gray-light;
    box-shadow: inset 1px 1px 2px #ddd8dc;
    outline: none;
    // height: 3.5rem;
    // padding: 0 2rem;
    color: $color-grey-dark;
    letter-spacing: 0.3rem;
    cursor: pointer;
    &:hover {
      letter-spacing: 0.1rem;
      font-size: 1.1rem;
      font-weight: 900;
    }
  }
}
.SellerDetailProducts {
  height: 100%;
  width: 100%;
  &__list {
    z-index: 5;
    // display: grid;
    // grid-template-columns: 24% 24% 24% 24%;
    // grid-gap: 1%;
    // overflow-y: scroll;
    height: 100%;
    width: 100%;
    columns: 4;
    // h3 {
    //   margin: 0 auto;
    //   width: 35rem;
    //   transform: rotateZ(45deg) translate(-7%, 40%);
    //   font-size: 3rem;
    //   letter-spacing: 0.2rem;
    //   color: $color-grey-dark;
    // }
    // border: 3px solid green;
    .Card {
      display: inline-block;
      cursor: pointer;
      border: 1px solid $color-grey-dark;
      width: 9rem;
      // height: 11rem;
      padding-top: 0;
      &__img {
        min-width: 6rem;
        // border-bottom: none;
      }
      &__heading {
        padding: 0.2rem;
        // border-bottom: 4px groove $color-white;
        h4 {
          margin: -0.4rem 0;
          max-width: 7rem;
          height: 1.7rem;
          overflow: hidden;
          // border: 3px solid green;
          text-overflow: ellipsis;
        }
        p {
          margin: -0.1rem 0;
        }
      }
    }
  }
}
.SellerDetails {
  // border: 2px solid lightblue;
  z-index: 10;
  position: fixed;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  min-width: 92rem;
  // margin: 3rem auto;
  display: flex;
  border-radius: $border-radius-primary;
  height: 65rem;
  // background-color: $color-gray-light-2;
  background: $details-gradient;
  box-shadow: 0px 0px 22px 2px rgba(0, 0, 0, 0.66);
  &__images {
    // border: 2px solid lightblue;
    padding: 1.5rem;
    width: 50%;
    display: flex;
    overflow: hidden;
    &--main {
      // border: 2px solid red;
      // border: 2px solid $color-grey-dark;
      padding: 1.5rem;
      border-radius: 0.5rem;
      background-color: $color-white;
      align-self: center;
      height: 100%;
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      img {
        max-width: 70%;
        max-height: 70%;
      }
    }
  }
  &__text {
    // border: 3px solid yellow;
    position: relative;
    width: 50%;
    letter-spacing: 0.1rem;
    font-size: $default-font-site;
    font-weight: 100;
    color: $color-black-lighter;
    display: flex;
    flex-direction: column;
    // justify-content: center;
    align-items: center;
    &--specs {
      i {
        margin-left: 1.3rem;
        cursor: pointer;
        &:hover {
          color: yellow;
        }
      }
      h3,
      h4 {
        margin-left: 1.3rem;
      }
      border-left: 3px groove $color-white;
      // background-color: $color-gray-light;
      border-radius: 0.3rem;
      margin: 5rem 0 3rem 0;
      width: 70%;
      & > p::before {
        content: "";
        margin: 0 0.5rem 0 1rem;
      }
    }
    &--desc {
      padding: 2rem;
      border: 0.3px solid $color-grey-dark;
      background-color: $color-white;
      border-radius: 0.5rem;
      width: 70%;
      height: 22rem;
      position: absolute;
      bottom: 9.5rem;
      word-wrap: break-word;
      overflow: scroll;
      p {
        width: 100%;
      }
    }
    &--btn {
      position: absolute;
      bottom: 3rem;
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      button {
        font-size: 1.5rem;
        // width: 100%;
        text-transform: uppercase;
        background-color: $color-gray-light-2;
        border: 1px solid #c8bfc4;
        box-shadow: inset 1px 1px 2px #ddd8dc;
        outline: none;
        border-radius: 10rem;
        height: 3.5rem;
        padding: 0 2rem;
        color: $color-grey-dark;
        letter-spacing: 0.3rem;
        cursor: pointer;
        &:nth-child(2) {
          margin: 0 1rem 0 1rem;
        }
        &:hover {
          letter-spacing: 0.2rem;
          font-weight: 900;
        }
      }
    }
  }
}
.SortFilter {
  &__Category {
    position: relative;
    display: flex;
    // margin-left: 1rem;
    min-height: 2rem;
    overflow: visible;
    // z-index: 0;
    // justify-content: center;
    // align-items: center;
    // border: 1px solid green;

    &--icon {
      padding-top: 0.3rem;
      font-size: 1.4rem;
      color: $color-gray-light;
      // color: $color-grey-dark;
    }
    select {
      .options {
        font-size: 1.6rem;
        color: rgba($color-grey-dark, 0.7);
        background-color: $color-gray-light;
      }
      font-size: 1.3rem;
      height: 2rem;
      transform: translateY(-0.3rem);
      text-transform: capitalize;
      // max-width: clamp(4rem, 8rem, 12rem);
      // max-width: clamp(4rem, 30%, 12rem);
      // width: min-content;
      // width: fit-content;
      max-width: 8rem;
      display: inline-block;
      outline: none;
      border: none;
      background-color: transparent;
      margin: 0;
      text-overflow: ellipsis;
      white-space: nowrap;
      letter-spacing: 0.2rem;
      color: $color-white;
      font-weight: 600;
      // color: $color-gray-light;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      cursor: pointer;
      &::-ms-expand {
        display: none;
      }
      &:hover {
        color: rgba($color-grey-dark, 0.8);
      }
    }
  }
}
.Footer {
  position: absolute;
  left: 0;
  width: 100%;
  height: $footer-height;
  margin: 0 auto;
  // left: 0;
  // bottom: 0;
  background-color: $color-black-lighter;
  // position: fixed;
  color: $color-white;
  // border-top-left-radius: $border-radius-secondary;
  // border-top-right-radius: $border-radius-secondary;
}
.Landing {
  // border: 7px solid green;
  margin: 2rem 0;
  // background-color: $color-gray-light;
  overflow: visible;
  position: relative;
  &__ContentBody {
    display: flex;
    justify-content: center;
  }
}
.ListCards {
  width: $grid-width;
  margin: 0 2rem;
  // border: 3px solid green;
  // margin: 0 auto;
  // padding: 1.5em;
  // max-width: $grid-width-2;
  &__list {
    z-index: 5;
    columns: 4;
    column-gap: 1rem;
    margin: 0 2rem;
    div {
      // margin: 0 1rem 1rem 0;
      display: inline-block;
      min-width: 100%;
    }
    margin: 0 auto;
    transform: translateY(1rem);
    z-index: 4;
    min-height: $min-height-of-view;
    padding-bottom: $footer-margin-top;
    @media (max-width: 930px) {
      columns: 3 150px;
    }
    @media (max-width: 710px) {
      columns: 2 200px;
    }
    @media (max-width: 485px) {
      columns: 1 400px;
      min-width: 100%;
    }
  }
}
.MyShop {
  width: $grid-width;
  // width: $grid-width-2;
  // border: 3px solid green;
  margin: 0 2rem;
  &__list {
    z-index: 5;
    columns: 4;
    column-gap: 1rem;
    div {
      margin: 0 1rem 1rem 0;
      display: inline-block;
      min-width: 80%;
    }
    margin: 0 auto;
    transform: translateY(1rem);
    z-index: 4;
    min-height: $min-height-of-view;
    padding-bottom: $footer-margin-top;
    @media (max-width: 930px) {
      columns: 3 150px;
    }
    @media (max-width: 710px) {
      columns: 2 200px;
    }
    @media (max-width: 485px) {
      columns: 1 400px;
      min-width: 100%;
    }
  }
}
.Navbar {
  position: fixed;
  // border-radius: 0.7rem;
  width: 100vw;
  top: 0;
  left: 0;
  z-index: 5;
  // background: linear-gradient(to bottom, #248dd2 0%, #d4d4d4 0%, #248dd2 100%);
  background-color: #6cabd7;
  // background-color: $color-gray-light;
  // background-image: url("../../files/backGround.jpg");
  // background-size: cover;
  // background-position: bottom;

  margin: 0 auto;
  &__primary {
    max-width: $grid-width;
    margin: 0 auto;
    padding: 0.4rem 2rem 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 0.3px solid $color-gray-light-3;
    border-radius: 0.5rem;
    &--logo {
      font-size: $logo-size;
      // color: $color-grey-dark;
      color: $color-gray-light;
      cursor: pointer;
      &:hover {
        color: $color-grey-dark-2;
      }
    }
    &--div {
      display: flex;
      align-items: center;
      & i {
        margin-left: 1rem;
        // color: $color-grey-dark;
        color: $color-gray-light;
        font-size: $default-font-site;
        cursor: pointer;
        &:hover {
          color: $color-grey-dark-2;
        }
      }
    }
  }
  &__secondary {
    // transform: translateX(-2.8vw);
    min-width: 57rem;
    max-width: 70rem;
    height: 2.5rem;
    margin: 0.5rem auto;
    display: flex;
    justify-content: space-around;
    // font-weight: 400;

    // word-spacing: 1rem;

    .add-product {
      min-width: 13rem;
      // background-color: burlywood;
    }

    &--tag {
      // background-color: chartreuse;
      letter-spacing: 0.2rem;
      // min-width: 13rem;
      // margin: 0 1rem;
      text-decoration: none;
      color: $color-white;
      font-weight: 600;
      &:hover {
        color: rgba($color-grey-dark, 0.8);
        // background-color: $color-gray-light-2;
      }
    }
  }
}
.Product {
  // margin: 7rem 0;
  width: $grid-width;
  // border: 3px solid green;
  min-height: $min-height-of-view;
  &__MainBtn button {
    text-transform: uppercase;
    color: $color-grey-dark;
    letter-spacing: 0.3rem;
    margin: 2rem 2.5rem 0 2.5rem;
    color: $color-grey-dark;
    font-weight: 100;
    width: 30rem;
    background-color: $color-gray-light-2;
    border: 1px solid #c8bfc4;
    box-shadow: inset 1px 1px 2px #ddd8dc;
    outline: none;
    border-radius: 10rem;
    height: 3.5rem;
    padding: 0 2rem;
    cursor: pointer;
    &:hover {
      letter-spacing: 0.2rem;
      font-weight: 900;
    }
  }
  &__tabs {
    // border: 3px solid lightblue;
    height: 3rem;
    max-width: 100%;
    margin: 0 auto;
    text-transform: uppercase;
    display: grid;
    grid-template-columns: 25% 25% 25% 25%;
    &--category {
      max-width: 100%;
      border-top: 0.3rem solid $color-black;
      background-color: $color-gray-light;
      height: 3rem;
      text-align: center;
      letter-spacing: 0.2rem;
      padding: 0.3rem 2rem 0 2rem;
      text-decoration: none;
      color: $color-black;
      &:not(.active) {
        opacity: 0.5;
      }
    }
  }
  &__Routes--Category {
    max-width: 100%;
    display: grid;
    // width: $grid-width;
    grid-template-columns: 50% 50%;
    // gap: 4%;
    color: $color-grey-dark;
    margin: 3rem auto;
    position: relative;
    // align-items: center;
    .Category__divs {
      display: flex;
      flex-direction: column;
      // justify-content: center;
      align-items: center;
      // border: 2px solid red;
      height: 18rem;
    }
    .Category__tags {
      letter-spacing: 0.2rem;
      font-weight: 400;
      margin: 0 auto;
      text-decoration: none;
      text-align: start;
      margin: 1rem 0.5rem;
    }
    .Category__ps {
      margin: 1rem 0.5rem;
      font-weight: 100;
    }
    .Category__btns {
      margin-top: 2rem;
      text-transform: uppercase;
      color: $color-grey-dark;
      letter-spacing: 0.3rem;

      color: $color-grey-dark;
      font-weight: 100;
      width: 40%;
      min-width: 15rem;
      background-color: $color-gray-light-2;
      border: 1px solid #c8bfc4;
      box-shadow: inset 1px 1px 2px #ddd8dc;
      outline: none;
      border-radius: 10rem;
      height: 3.5rem;
      padding: 0 2rem;
      cursor: pointer;
      &:hover {
        letter-spacing: 0.2rem;
        font-weight: 900;
      }
    }
  }
  .BasicInfo {
    max-width: 100%;
    color: $color-grey-dark;
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    &__radio {
      width: 100%;
      display: flex;
      height: 3rem;
      max-width: $grid-width;
      margin: 0 auto;
      text-transform: uppercase;
      display: grid;
      grid-template-columns: 50% 50%;
      padding-bottom: 3%;
      &--divs {
        justify-self: center;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 100%;
        border-top: 0.3rem solid $color-black;
        background-color: $color-gray-light;
        height: 3.6rem;
        text-align: center;
        letter-spacing: 0.2rem;
        padding: 0.3rem 2rem 0.5rem 2rem;
        text-decoration: none;
        color: $color-black;
      }
    }
    &__inputs {
      margin-top: 2rem;
      width: 70%;
      display: grid;
      grid-template-columns: 50% 50%;
      letter-spacing: 0.2rem;
      margin: 2rem 0;
      color: $color-grey-dark;
      &--div {
        justify-self: center;
        // border: 2px solid lightblue;
        width: 95%;
        input {
          border-radius: 0.5rem;
          background-color: $color-white;
          border: 1px solid $color-grey-dark;
          width: 100%;
          padding-left: 3%;
          height: 3rem;
        }
        select {
          border-radius: 0.5rem;
          background-color: $color-white;
          border: 1px solid $color-grey-dark;
          width: 100%;
          padding-left: 3%;
          height: 3rem;
        }
      }
    }
  }
  .PriceImgDesc {
    max-width: 100%;
    color: $color-grey-dark;
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    &__inputs {
      margin-top: 2rem;
      width: 80%;
      display: grid;
      letter-spacing: 0.2rem;
      margin: 2rem 0;
      color: $color-grey-dark;
      // border: 2px solid red;
      &--div {
        width: 100%;
        justify-self: center;
        // border: 2px solid lightblue;
        padding-left: 5%;
        width: 95%;
        input {
          border-radius: 0.5rem;
          background-color: $color-white;
          border: 1px solid $color-grey-dark;
          width: 100%;
          padding-left: 3%;
          height: 3rem;
        }
        &-text {
          margin: 1rem;
          display: grid;
          grid-template-columns: 32% 32% 32%;
          gap: 1%;
          h3 {
            margin: 0 1rem;
          }
        }
        &-number {
          margin: 1rem;
          display: grid;
          grid-template-columns: 32% 32% 32%;
          gap: 1%;
          h3 {
            margin: 0 1rem;
          }
        }
        &-file-new {
          margin: 1rem;
          display: grid;
          grid-template-columns: 49% 10%;
          // gap: 1%;
          h3 {
            margin: 0 1rem;
          }
          .file {
            width: 100%;
            max-height: 15rem;
            overflow-y: scroll;
            &__inputs {
              margin-bottom: 0.5rem;
            }
            .moreInputs {
              border: 1px solid $color-grey-dark;
              position: sticky;
              border-radius: 0.3rem;
              padding: 0.3rem;
              cursor: pointer;
            }
          }
          .new {
            width: 5rem;
          }
        }
        &-textArea {
          margin: 1rem;
          display: flex;
          textarea {
            width: 50rem;
            height: 10rem;
          }
        }
      }
    }
  }
  .Publish {
    max-width: $grid-width;
    margin: 0 auto;
    display: flex;
    height: 60rem;
    background-color: transparent;
    // background-color: $color-gray-light;
    &__images {
      // border: 2px solid lightblue;
      width: 50%;
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      &--main {
        max-width: 100%;
        // overflow: scroll;
        max-height: 82%;
        // border: 2px solid red;
        border: 2px solid $color-grey-dark;
        background-color: $color-white;

        border-radius: 0.5rem;
        align-self: center;
        height: 100%;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        img {
          max-width: 100%;
          max-height: 100%;
        }
      }
      &--list {
        margin-top: 2rem;
        // border: 2px solid purple;
        display: grid;
        grid-template-columns: 14% 14% 14% 14% 14% 14% 14%;
        gap: 0.5%;
        overflow: scroll;
        img {
          width: 6rem;
          height: 6rem;
          border-radius: 50%;
          background-color: $color-white;
        }
      }
    }
    &__text {
      // border: 3px solid yellow;
      width: 48%;
      letter-spacing: 0.1rem;
      font-size: $default-font-site;
      font-weight: 100;
      color: $color-black-lighter;
      display: flex;
      flex-direction: column;
      // justify-content: center;
      align-items: center;
      &--specs {
        border-left: 4px groove $color-white;
        // background-color: $color-gray-light;
        border-radius: 0.3rem;
        margin: 5rem 0 3rem 0;
        width: 70%;
        & > p::before {
          content: "";
          margin: 0 0.5rem 0 1rem;
        }
      }
      &--desc {
        padding: 2rem;
        border: 2px solid $color-grey-dark;
        background-color: $color-white;
        border-radius: 0.5rem;
        width: 70%;
        min-height: 30%;
        margin-bottom: 2rem;
        word-wrap: break-word;
        overflow: scroll;
        p {
          width: 100%;
        }
      }
      &--btn {
        display: flex;
        margin-bottom: 1.5rem;
        justify-self: center;
        max-width: 100%;
        button {
          max-width: 60%;
        }
      }
    }
  }
}
@import "abstracts/functions";
@import "abstracts/mixins";
@import "abstracts/variables";

@import "base/animation";
@import "base/base";
@import "base/typography";

@import "components/Card";
@import "components/Search";
@import "components/Login";
@import "components/Register";
@import "components/CardDetails";
@import "components/SortFilter";
@import "components/SellerDetails";
@import "components/SellerDetailProducts";
@import "components/MyProfile";
@import "components/EditProduct";
@import "components/Chat";
@import "components/Basket";

@import "container/Landing";
@import "container/ListCards";
@import "container/Navbar";
@import "container/Product";
@import "container/MyShop";
@import "container/Footer";
import React, { useState, useEffect, useContext, useRef } from "react";
import Card from "../components/Card";
import EditProduct from "../components/EditProduct";
import SellerDetail from "../components/SellerDetail";
import { ProfileDetailContext } from "../context/MainContext";
import CardDetails from "../components/CardDetails";
import { getAllPopular } from "../api/api";

interface PopularProps {
  allSellers: {}[] | undefined;
  setAllSellers: React.Dispatch<React.SetStateAction<{}[] | undefined>>;
}

const Popular: React.FC<PopularProps> = ({ allSellers, setAllSellers }) => {
  const {
    sellerDetail,
    setSellerDetail,
    detailCard,
    setDetailCard,
    editProduct,
    loggedSellerInfo,
    setEditProduct,
  } = useContext(ProfileDetailContext);
  const [productList, setProductList] = useState<{}[] | null>();
  const sellersRef = useRef(allSellers);

  useEffect(() => {
    (async function providePopular() {
      await getAllPopular().then((data) => {
        let newData = bubbleUp(data) as any;
        // console.log(newData);

        let popularCategoriesArr = newData
          .map((obj: { category: string }) => {
            return obj.category;
          })
          .slice(0, 10);

        if (loggedSellerInfo !== undefined) {
          sellersRef.current = allSellers;

          // console.log(popularCategoriesArr);
          var categorizedSellers: {}[] = [];

          popularCategoriesArr.forEach((category: string) => {
            var data: {}[] = [];
            if (sellersRef.current !== undefined)
              data = [
                ...sellersRef.current.filter((obj: any) => {
                  return obj.category === category;
                }),
              ];
            if (data !== undefined) {
              categorizedSellers = [...categorizedSellers, ...data];
            }
          });
          // console.log(categorizedSellers);
          sellersRef.current = unique(categorizedSellers, "productId");
          setProductList(sellersRef.current);
        }
      });
    })();
  }, [allSellers]);

  // useEffect(() => {
  // }, []);

  const renderProductList = productList?.map((obj: any, i) => {
    return (
      <div onClick={() => handleClick(obj)} key={i}>
        <Card
          sellerId={obj.sellerId}
          setSellerDetail={setSellerDetail}
          key={i}
          ShopName={obj.sellerName}
          productName={obj.productName}
          brand={obj.brand}
          description={obj.desc}
          price={obj.price}
          category={obj.category}
          imgSrc={obj.imgSrc}
        />
      </div>
    );
  });

  const handleClick = (obj: {
    sellerName: string;
    show: boolean;
    sellerId: string;
    productId: string;
  }) => {
    if (obj.sellerId === loggedSellerInfo.sellerId) {
      setEditProduct({
        sellerName: obj.sellerName,
        sellerId: obj.sellerId,
        productId: obj.productId,
        show: true,
      });
    } else {
      setDetailCard({
        sellerName: obj.sellerName,
        sellerId: obj.sellerId,
        productId: obj.productId,
        show: true,
      });
    }
  };

  return (
    <div className="Popular">
      <div className="Popular__detail">
        {detailCard.show && <CardDetails />}
      </div>
      <div className="Popular__detail">
        {sellerDetail.show && <SellerDetail />}
      </div>
      <div className="Popular__detail">
        {editProduct.show && <EditProduct />}
      </div>
      <div className="Popular__list">
        {renderProductList}
        {/* {renderProductList}
        {renderProductList}
        {renderProductList}
        {renderProductList}
        {renderProductList} */}
      </div>
    </div>
  );
};

export default Popular;

function unique(arrOfObj: {}[], prop: string) {
  let newArr: {}[] = [];
  arrOfObj.forEach((val: any) => {
    if (
      undefined ===
      newArr.find(
        (value: any) =>
          JSON.stringify(value[prop]) === JSON.stringify(val[prop])
      )
    ) {
      newArr.push(val);
    }
  });
  return newArr;
}

function bubbleUp(arr: { value: number }[]) {
  let noSwaps;
  for (let i = arr.length - 1; i >= 0; i--) {
    noSwaps = true;
    for (let j = 0; j < i; j++) {
      if (arr[j].value < arr[j + 1].value) {
        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
        noSwaps = false;
      }
    }
    if (noSwaps) {
      break;
    }
  }
  return arr;
}
.Popular {
  width: $grid-width;
  margin: 0 2rem;
  // border: 3px solid green;
  // margin: 0 auto;
  // padding: 1.5em;
  // max-width: $grid-width-2;
  &__list {
    z-index: 5;
    columns: 4;
    column-gap: 1rem;
    margin: 0 2rem;
    div {
      // margin: 0 1rem 1rem 0;
      display: inline-block;
      min-width: 100%;
    }
    margin: 0 auto;
    transform: translateY(1rem);
    z-index: 4;
    min-height: $min-height-of-view;
    padding-bottom: $footer-margin-top;
    @media (max-width: 930px) {
      columns: 3 150px;
    }
    @media (max-width: 710px) {
      columns: 2 200px;
    }
    @media (max-width: 485px) {
      columns: 1 400px;
      min-width: 100%;
    }
  }
}
import React, { useState, useEffect, useContext, useRef } from "react";
import Card from "../components/Card";
import EditProduct from "../components/EditProduct";
import SellerDetail from "../components/SellerDetail";
import { ProfileDetailContext } from "../context/MainContext";
import CardDetails from "../components/CardDetails";

interface SuggestedProps {
  allSellers: {}[] | undefined;
  setAllSellers: React.Dispatch<React.SetStateAction<{}[] | undefined>>;
}

const Suggested: React.FC<SuggestedProps> = ({ allSellers, setAllSellers }) => {
  const {
    sellerDetail,
    setSellerDetail,
    detailCard,
    setDetailCard,
    editProduct,
    loggedSellerInfo,
    setEditProduct,
  } = useContext(ProfileDetailContext);
  const [productList, setProductList] = useState<{}[] | null>();
  const sellersRef = useRef(allSellers);

  useEffect(() => {
    if (loggedSellerInfo !== undefined) {
      sellersRef.current = allSellers;

      let likesString = "";
      loggedSellerInfo.likes.forEach((val: { name: string }) => {
        likesString = likesString.concat(` ${val.name},`);
      });
      let strArr: string[] = [];
      likesString.split("").forEach((val) => {
        if (val !== " ") {
          strArr.push(val);
        }
      });
      let compressedString = strArr.join("");
      const categoriesArr = compressedString
        .split(",")
        .filter((str: string) => {
          if (str !== "") return true;
        });

      var categorizedSellers: {}[] = [];

      categoriesArr.forEach((category: string) => {
        var data: {}[] = [];
        if (sellersRef.current !== undefined)
          data = [
            ...sellersRef.current.filter((obj: any) => {
              return obj.category === category;
            }),
          ];
        if (data !== undefined) {
          categorizedSellers = [...categorizedSellers, ...data];
        }
      });
      console.log(categorizedSellers);
      sellersRef.current = unique(categorizedSellers, "productId");
      setProductList(sellersRef.current);
    }
  }, [allSellers]);

  // useEffect(() => {
  // }, []);

  const renderProductList = productList?.map((obj: any, i) => {
    return (
      <div onClick={() => handleClick(obj)} key={i}>
        <Card
          sellerId={obj.sellerId}
          setSellerDetail={setSellerDetail}
          key={i}
          ShopName={obj.sellerName}
          productName={obj.productName}
          brand={obj.brand}
          description={obj.desc}
          price={obj.price}
          category={obj.category}
          imgSrc={obj.imgSrc}
        />
      </div>
    );
  });

  const handleClick = (obj: {
    sellerName: string;
    show: boolean;
    sellerId: string;
    productId: string;
  }) => {
    if (obj.sellerId === loggedSellerInfo.sellerId) {
      setEditProduct({
        sellerName: obj.sellerName,
        sellerId: obj.sellerId,
        productId: obj.productId,
        show: true,
      });
    } else {
      setDetailCard({
        sellerName: obj.sellerName,
        sellerId: obj.sellerId,
        productId: obj.productId,
        show: true,
      });
    }
  };

  return (
    <div className="Suggested">
      <div className="Suggested__detail">
        {detailCard.show && <CardDetails />}
      </div>
      <div className="Suggested__detail">
        {sellerDetail.show && <SellerDetail />}
      </div>
      <div className="Suggested__detail">
        {editProduct.show && <EditProduct />}
      </div>
      <div className="Suggested__list">
        {renderProductList}
        {/* {renderProductList}
        {renderProductList}
        {renderProductList}
        {renderProductList}
        {renderProductList} */}
      </div>
    </div>
  );
};

export default Suggested;

function unique(arrOfObj: {}[], prop: string) {
  let newArr: {}[] = [];
  arrOfObj.forEach((val: any) => {
    if (
      undefined ===
      newArr.find(
        (value: any) =>
          JSON.stringify(value[prop]) === JSON.stringify(val[prop])
      )
    ) {
      newArr.push(val);
    }
  });
  return newArr;
}
.Suggested {
  width: $grid-width;
  margin: 0 2rem;
  // border: 3px solid green;
  // margin: 0 auto;
  // padding: 1.5em;
  // max-width: $grid-width-2;
  &__list {
    z-index: 5;
    columns: 4;
    column-gap: 1rem;
    margin: 0 2rem;
    div {
      // margin: 0 1rem 1rem 0;
      display: inline-block;
      min-width: 100%;
    }
    margin: 0 auto;
    transform: translateY(1rem);
    z-index: 4;
    min-height: $min-height-of-view;
    padding-bottom: $footer-margin-top;
    @media (max-width: 930px) {
      columns: 3 150px;
    }
    @media (max-width: 710px) {
      columns: 2 200px;
    }
    @media (max-width: 485px) {
      columns: 1 400px;
      min-width: 100%;
    }
  }
}
const db = require('../models');

const increasePopularity = async (req, res)=>{
  let {category} = req.body
  if(category !== undefined){
    db.popular.find({}).then(async data=>{
      let arrOfObj = data;
      let found = pushPopular({category: category}, arrOfObj)
      console.log(found)
      if(found !== undefined){
        db.popular.findByIdAndUpdate(found._id, {value: found.value + 1}).then(data=>{
          res.send(data)
          return;
        }).catch(err=>{throw new Error(err)})
      }else{
        db.popular.create({category: category}).then(data=>{
          res.json(data)
          return;
        }).catch(err =>{throw new Error(err)
        } )
      }
    }).catch(err=>{throw new Error(err)
    })
  }else{
    res.send("please insert category")
    return
  }
}

module.exports = {increasePopularity }


function pushPopular(obj, arrOfObj){
  let newArrOfObj = arrOfObj;
  let key = Object.keys(obj)[0]
  let val = Object.values(obj)[0]
  let filteredArr = Object.values(newArrOfObj)
  // console.log(filteredArr)
  let found = filteredArr.find(objInArr=>{
        // console.log(Object.values(objInArr)[2].category, val)
      return Object.values(objInArr)[2].category ===  val
  })
  
  return found
}
